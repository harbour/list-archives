From elart at elart.it  Fri Dec  1 08:41:03 2006
From: elart at elart.it (elart)
Date: Fri Dec  1 08:36:01 2006
Subject: [Harbour] ChangeLog 2006-11-30 03:50 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061130025434.GA7116@localhost.localdomain>
References: <20061130025434.GA7116@localhost.localdomain>
Message-ID: <457030EF.4030002@elart.it>

Przemyslaw Czerpak wrote:
> 2006-11-30 03:50 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
>   * harbour/include/hbcompdf.h
>   * harbour/source/compiler/harbour.l
>   * harbour/source/compiler/harbour.c
>   * harbour/source/compiler/harbour.y
>     * removed declaration and all references to global variable hb_comp_data
>       it's not longer necessary after last modifications
> 
>   * harbour/source/compiler/harbour.yyc
>     * synced compiler grammar parser
> 
>   * harbour/source/macro/macro.yyc
>     ! regenerated macro compiler grammar parser with -p hb_macro - I forgot
>       about this prefix before last commit
> 
> best regards,
> Przemek
> _______________________________________________
> Harbour mailing list
> Harbour@harbour-project.org
> http://lists.harbour-project.org/mailman/listinfo/harbour
> 
> 

Harbour on Fedora Leinux build fine but i can't make rpm
here the error:

make[3]: Entering directory 
`/usr/src/redhat/BUILD/harbour-0.46.2/source/compiler/linux/gcc'
make[3]: *** No rule to make target `harboury.c', needed by 
`harboury.o'.  Stop.
make[3]: Leaving directory 
`/usr/src/redhat/BUILD/harbour-0.46.2/source/compiler/linux/gcc'
make[2]: *** [descend] Error 2

HTH

Best regards


-- 

---------------------------------------------------------------------
---- Firefox e Thunderbird aumentano la sicurezza del vostro pc ------
---- Domande e risposte ----
---------------------------------------------------------------------
1) - Cosa sono queste note su Firefox e Thunderbird a cosa servono?
Servono a rendere il vostro pc pi? sicuro e a utilizzare Internet in 
modo veloce ed funzionale.
Sono programmi gratuiti e vengono sviluppati da volontari.

2) - C'e' almeno un motivo per continuare a leggere questa breve nota ?
Si!... se siete stanchi di finestre popup che si aprono all'improvviso e
non volete che software spia si installi a vostra insaputa rallentando
il vostro pc...
Se volete provare Firefox e l'estrema comodit? e velocit? della 
navigazione a schede.

3) - Cosa e' la navigazione a schede?
Provatela voi stessi con Firefox per navigare a schede si tiene premuto 
il tasto control
e si clicca su un collegamento di una pagina internet.

4) - Si voglio provare cosa devo fare?
La risposta ...e' semplice.
Per consultare Internet usa --------> Firefox.
Mentre per posta elettronica usa ---> Thunderbird.
Continua a leggere fino in fondo queste brevi note.

5) - Cosa sono questi software?
Sono due software gratuiti in lingua italiana si installano in 10
minuti, non modificano le precedenti impostazioni del pc.
Sono stati gi? scaricati ed installati da milioni di utenti
che li usano con piena soddisfazione.

6) - Uso Windows posso installarli?
Si puoi installarli senza problemi.

7) - Danneggio il mio pc se li installo?
No assolutamente, anzi migliorera' la tua sicurezza.

8) - Perder? tutte le impostazioni precedenti se li installo?
No!
Firefox durante l'installazione importa impostazioni, preferiti
insomma tutto quanto da Internet Explorer.
Thunderbird importa impostazioni e tutti i messaggi inviati
ricevuti e rubrica da Microsoft Outlook.

9) - Se non mi piacciono potro' tornare indietro?
Si..! ma pensiamo che difficilmente tornerai indietro perch? Firefox
e Thunderbird sono programmi stabili, funzionali, utili e sicuri.
In effetti non dovrai tornare indietro perch? essi non intaccano i 
programmi
gi? esistenti che potrai continuare ad usare.
Potrai semplicemente disinstallarli senza problemi.

10) - Bene ho deciso li installo perch? almeno voglio provarli cosa devo 
fare ?
Per un'installazione immediata c'e' una pagina apposita
http://www.elart.it/mozilla/

11) - Come rifinisco l'installazione di Firefox ovvero come scarico in 
modo veloce Java, Flash ?
Visita il link http://elart.it/mozilla/plugin_etc.php

--------------------------------------------------------------------
Sentitevi liberi di allegare questa nota ai vostri messaggi di posta
e di diffondere Firefox e Thunderbird in qualsiasi modo.
Questa nota la scriviamo perch? stiamo partecipando alla diffusione
mondiale, gratuita e volontaria di Firefox e Thunderbird.
Maggiori dettagli al sito www.spreadfirefox.com ( in lingua inglese )
---------------------------------------------------------------------
From druzus at priv.onet.pl  Fri Dec  1 10:40:35 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec  1 10:41:23 2006
Subject: [Harbour] harbour.exe,
	unrecoverable error 9010: hb_xfree called with an invalid pointer
In-Reply-To: <20061130153355Z5218577-29089+16569@ps8.test.onet.pl>
References: <20061130153355Z5218577-29089+16569@ps8.test.onet.pl>
Message-ID: <20061201154035.GA9610@localhost.localdomain>

On Thu, 30 Nov 2006, J. Lefebvre wrote:
> Hi,
> The following program crash harbour.exe at compile time.
[...]
> create class test
>  method test inline trace("Hello World)
>  method test inline ,trace("Hello World")
> endclass
[...]
> unrecoverable error 9010: hb_xfree called with an invalid pointer

Many thanks for example.
This is reduced version:

   if i
      qout({|| 1

Which clearly shows that destructors mechanism does not work as
expected with grammar rules like the ones which we have.
They are not as clean as it should be and for sure we should
make harbour.y cleaner in the future but for such simple situation
destructors should work and internal bison logic should properly
detect that expression was used. I make deeper test and for some
expressions in our grammar definitions destructors are not activated.
It can be fixed by modifications in grammar rules but I do not plan
to waste more time on bison. I'll create a small GC for expressions
and resolve the problem outside the bison. I left destructors only
for literal strings with embedded ASCII NUL character and codeblock
string representation with additional protection against execution
for used symbols to avoid GPF in example like above. It will resolve
the problem and I'll be very happy forgetting about bison for a long
time. Before I invested my time in some of last modifications I should
check if there is a chance they will work. My fault. I will remeber
to not try to use bison for bigger grammars when program should be
MT safe without memory leaks. I do not have time now to rewrite our
grammar definition in Lemon syntax and for sure after such operation
it will be necessary to make extensive time consuming tests so I think
you also won't be happy.
Ryszard if you will find a while please make some cleanup in existing
rules. Mostly in some multi line statements like IF/ELSEIF/ELSE/ENDIF,
WHILE/END, FOR/NEXT, etc. Compare errors reported by Clipper/xHarbour
and Harbour for this code:

    if .t.
       qout(
    endif
    while .t.
       qout(
    enddo
    for i:=1 to 2
       qout(
    next

In bigger programs it begins to be very confusing.
Also _ProcReq_( <cFile> ) cannot be used inside such statements.
    if .t.
       _ProcReq_( "somecode" )
    endif
and this for sure should be fixed before beta release because we are
not supporting valid Clipper syntax. I'm sorry but I really want to
stop modifications in bison grammar definitions. I will work on some
other code. There is still a lot of things to do.

best regards,
Przemek
From druzus at priv.onet.pl  Fri Dec  1 13:01:39 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec  1 13:02:30 2006
Subject: [Harbour] ChangeLog 2006-12-01 18:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061201180139.GA10592@localhost.localdomain>

2006-12-01 18:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/bin/pack_src.sh
    + added packing *.yy[ch] files

  * harbour/makefile.bc
  * harbour/makefile.vc
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/include/hbexprc.c
  * harbour/include/hbexprop.h
  * harbour/include/hbpp.h
  * harbour/source/common/expropt1.c
  * harbour/source/common/expropt2.c
  * harbour/source/compiler/Makefile
  * harbour/source/compiler/complex.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.l
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/harbour.yyh
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/macro/macro.y
  * harbour/source/macro/macro.yyc
  * harbour/source/pp/ppcore.c
    + added hb_comp prefix to grammar/lexer compiler public functions to
      reduce possible conflict with 3-rd party code which may use default
      yy prefix.
    ! do not use bison destructors for expressions. Internal bison logic
      cannot properly detect if expression was used or not in some of our
      grammar rules and it's possible that some expressions will not be freed
      and some other freed twice.
    ! added protection against multiple destructors execution for CBSTART
      and LITERAL tokens
    * added small garbage collector for deallocating expressions which were
      not freed (such situation can happen in syntax errors)
    % some optimizations in used structures to reduce their sizes
    + added protection against execution PCODE optimizations for functions
      which were not cleanly compiled.

  * harbour/source/rtl/idle.c
    * use const in nanosec() timeout declaration

best regards,
Przemek
From r at astral-it.com  Sat Dec  2 09:54:17 2006
From: r at astral-it.com (roman modic)
Date: Sat Dec  2 09:54:59 2006
Subject: [Harbour] OT: Harbour on line
References: <456f05a1.111d42ba.5316.ffff84b0@mx.google.com>
Message-ID: <009601c71621$d2a614e0$0501a8c0@MASTERMIND>

Hello!

----- Original Message ----- 
From: "Antonio Linares" <antonioharbour@gmail.com>
To: "'Harbour Project Main Developer List.'" <harbour@harbour-project.org>
Sent: Thursday, November 30, 2006 5:23 PM
Subject: RE: [Harbour] OT: Harbour on line


> Roman,
>
>> OT, but here are two Adobe Flex 2 examples:
>> http://www.adobe.com/devnet/flex/samples/code_explorer/
>> http://www.adobe.com/devnet/flex/samples/style_explorer/
>
> Are you able to run a mxml file from a web server ? I have tried from our
> hosting company and from google pages creator, but it does not run. What is
> it missing ? Thanks! :)
>

I'm not testing it yet - maybe this page will help:
http://labs.adobe.com/wiki/index.php/Flex_Stress_Testing_Framework
[quote]
The Flex Data Services Stress Testing Framework helps Flex developers using Flex Data Services load test their Flex 2 applications. 
Flex Data Services offers a number of data transport channels for communicating between a Flex client and the Flex Data Services 
server. These channels include RTMP(s), AMF(s) and HTTP(s). Most commercial load testing tools rely on data being sent over HTTP and 
less performing implementations of the AMF protocol (usually AMF0). Flex Data Services enables developers to leverage HTTP in 
addition to the latest and highest performing version of AMF (AMF3) and data push with RTMP. As most load testing tool vendors have 
not yet released support for RTMP(s) or the latest version of AMF(s), the Flex Data Services Stress Testing Framework allows Flex 
developers to load test their applications that use RTMP and AMF3 without needing to use a commercial testing tool.

The Flex Data Services Stress Testing Framework runs a small socket server called the Test Browser Server on a number of client 
computers. The Browser Server is responsible for launching web browsers on each client computer that it runs on. Each web browser 
then loads a target MXML test application that makes requests to the server. To increase load, you set the browser server to launch 
more browser instances. When the resources of the client computer running the browser server are fully utilized, you can add 
additional client computers for the browser server to manage
[/quote]

Regards, Roman 

From antonioharbour at gmail.com  Sun Dec  3 15:27:46 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Sun Dec  3 15:28:04 2006
Subject: [Harbour] OT: deleting a CVS directory
Message-ID: <4573334f.54ea78f5.675a.099c@mx.google.com>

On a different sourceforge project (not Harbour :-) I am trying to delete an
empty directory ? I am loged as admin. How may I do it ? Thanks,

From e.m.giordano at emagsoftware.it  Sun Dec  3 15:40:52 2006
From: e.m.giordano at emagsoftware.it (Enrico Maria Giordano)
Date: Sun Dec  3 15:41:27 2006
Subject: [Harbour] OT: deleting a CVS directory
References: <4573334f.54ea78f5.675a.099c@mx.google.com>
Message-ID: <01da01c7171b$52c49800$0100a8c0@emag>


-----Messaggio Originale----- 
Da: "Antonio Linares" <antonioharbour@gmail.com>
A: "'Harbour Project Main Developer List.'" <harbour@harbour-project.org>
Data invio: domenica 3 dicembre 2006 21.27
Oggetto: [Harbour] OT: deleting a CVS directory


> On a different sourceforge project (not Harbour :-) I am trying to delete an
> empty directory ? I am loged as admin. How may I do it ?

You can't, as far as I know.

EMG

--
EMAG Software Homepage:     http://www.emagsoftware.it
The EMG's ZX-Spectrum Page: http://www.emagsoftware.it/spectrum
The Best of Spectrum Games: http://www.emagsoftware.it/tbosg
The EMG Music page:         http://www.emagsoftware.it/emgmusic 

From teo at windtelsoft.com  Sun Dec  3 15:57:08 2006
From: teo at windtelsoft.com (Teo Fonrouge)
Date: Sun Dec  3 15:57:15 2006
Subject: [Harbour] OT: deleting a CVS directory
In-Reply-To: <4573334f.54ea78f5.675a.099c@mx.google.com>
References: <4573334f.54ea78f5.675a.099c@mx.google.com>
Message-ID: <200612031457.08185.teo@windtelsoft.com>

On Sunday 03 December 2006 14:27, Antonio Linares wrote:
> On a different sourceforge project (not Harbour :-) I am trying to delete
> an empty directory ? I am loged as admin. How may I do it ? Thanks,

It is not possible without rebuilding the entire reposotiry tree, this  
limitation (among the many others) is resolved with svn repositories.

May be it is time to think on migrate to subversion repositories.

best regards

Teo Fonrouge
From antonioharbour at gmail.com  Sun Dec  3 20:04:49 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Sun Dec  3 20:05:06 2006
Subject: [Harbour] OT: deleting a CVS directory
In-Reply-To: <01da01c7171b$52c49800$0100a8c0@emag>
Message-ID: <4573743d.6a81ecfd.70e7.472d@mx.google.com>

> You can't, as far as I know.

Is there a way to rename a CVS directory ?

Thanks,

Antonio

From antonioharbour at gmail.com  Mon Dec  4 02:37:18 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Mon Dec  4 02:37:39 2006
Subject: [Harbour] OT: comitting many files
Message-ID: <4573d03e.611fe0f6.747d.3bb5@mx.google.com>

Przemek,

When you commit many files changes to the CVS, do you commit them one by one
? Or is there a way to process them together ? 

Thanks,

From niki at synel.co.il  Mon Dec  4 02:40:26 2006
From: niki at synel.co.il (Chen Kedem)
Date: Mon Dec  4 02:39:08 2006
Subject: [Harbour] OT: deleting a CVS directory
Message-ID: <4573D0EA.20B9@synel.co.il>

Antonio,

> deleting a CVS directory

On SF you can submit a help request on the main page
(project ID=1 not yours), and ask them as the admin of that project
to delete, rename and so on.

> Is there a way to rename a CVS directory ?

The only way is to create a new directory, add to it all the files
from the old directory, and remove the files from the old directory.
(CVS will see them as new files and you loose all the history about
them).

  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From antonioharbour at gmail.com  Mon Dec  4 02:57:40 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Mon Dec  4 02:57:58 2006
Subject: [Harbour] OT: deleting a CVS directory
In-Reply-To: <4573D0EA.20B9@synel.co.il>
Message-ID: <4573d501.1e4c80d2.71f6.63b5@mx.google.com>

Chen, 

> > deleting a CVS directory
> 
> On SF you can submit a help request on the main page (project 
> ID=1 not yours), and ask them as the admin of that project to 
> delete, rename and so on.

Thanks!

Antonio

From antonioharbour at gmail.com  Mon Dec  4 03:12:58 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Mon Dec  4 03:13:19 2006
Subject: [Harbour] OT: deleting a CVS directory
In-Reply-To: <4573D0EA.20B9@synel.co.il>
Message-ID: <4573d897.641e618a.2f19.5ce6@mx.google.com>

Chen, 

> > deleting a CVS directory
> 
> On SF you can submit a help request on the main page (project 
> ID=1 not yours), and ask them as the admin of that project to 
> delete, rename and so on.

I can't find such help request option. Would you mind to make a screenshot
of it and post it at imageshack.us and copy here the url ? 

Or any other way to describe where the option is :)

Thanks,

Antonio

From niki at synel.co.il  Mon Dec  4 03:58:20 2006
From: niki at synel.co.il (Chen Kedem)
Date: Mon Dec  4 03:56:56 2006
Subject: [Harbour] OT: deleting a CVS directory
Message-ID: <4573E32C.3B4B@synel.co.il>

Antonio,

> I can't find such help request option.
> Or any other way to describe where the option is :)

Hmm, it used to be easier to find. Here is the link:
http://sourceforge.net/tracker/?group_id=1&atid=200001

On that page there is a "Submit New" link with an option to login

  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From druzus at priv.onet.pl  Mon Dec  4 13:24:01 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec  4 13:24:59 2006
Subject: [Harbour] ChangeLog 2006-12-04 19:20 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061204182401.GA19977@localhost.localdomain>

2006-12-04 19:20 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/source/macro/macro.y
  * harbour/source/macro/macro.yyc
  * harbour/source/macro/macro.yyh
  * harbour/source/macro/macrolex.c
    * added support for extended string (e"...") to macro compiler and
      strings with embedded ASCII NUL character (chr(0))

  * harbour/source/rtl/valtostr.c
    * added HB_STRTOEXP() function which converts string item to valid
      expression which can be compiled by macro compiler. String may
      contain any characters.

  * harbour/source/rtl/persist.prg
    * use HB_STRTOEXP() for sting conversion and 0d....... for date
      constants

  * harbour/source/rtl/readvar.prg
  * harbour/source/rtl/xsavescr.c
    * minor cleanup

best regards,
Przemek
From druzus at priv.onet.pl  Mon Dec  4 13:32:50 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec  4 13:33:44 2006
Subject: [Harbour] OT: comitting many files
In-Reply-To: <4573d03e.611fe0f6.747d.3bb5@mx.google.com>
References: <4573d03e.611fe0f6.747d.3bb5@mx.google.com>
Message-ID: <20061204183250.GA29485@localhost.localdomain>

On Mon, 04 Dec 2006, Antonio Linares wrote:
> Przemek,
> When you commit many files changes to the CVS, do you commit them one by one
> ? Or is there a way to process them together ? 

Usually I'm creating list of modified/added/removed files using
    cvs -z3 update -A -P -d -R > lst
The I'm creating diff file to check what I've changed to avoid committing
some stupid typos or code which should not be committed to CVS yet and
to create ChangeLog message using
    cvs -z3 diff -uN <moddified_new_removed_files,...>
and finally I'm committing everything using:
    cvs -z3 commit

Of course in some situations I'm using differ method of committing.
F.e. when I only want to commit some chosen modifications and I'm
using strongly modified repository copy.

best regards,
Przemek
From lorenzo_fiorini at teamwork.it  Sat Dec  2 04:22:52 2006
From: lorenzo_fiorini at teamwork.it (Lorenzo Fiorini)
Date: Wed Dec  6 03:11:10 2006
Subject: [Harbour] ping
In-Reply-To: <456ed6ec.2063c6ea.60df.ffff91a5@mx.google.com>
References: <456ed6ec.2063c6ea.60df.ffff91a5@mx.google.com>
Message-ID: <457145EC.5080000@teamwork.it>

Antonio Linares wrote:
> Its just that sometimes I need to do self-brainstorming and reconsider my
> own ideas, and on those ocassions I like to discuss them with the Harbour
> team :-)
>   
May I join the brainstorming? :)

I can't discuss of MT, PP, compilers and algorithms, I'm basically a 
consultant and
an application/database developer so I have few occasions to share ideas :)

In the past I had to move part of my software portfolio to LAPP 
linux/apache/php/postgresql
to get contracts ( and I had to hire php developers ) but I still 
maintain Clipper/FiveWin
and actively develop xHarbour/Linux/gtxwc apps.

To avoid "one company two standards" I started to use xHarbour/cgi as 
business language
between the browser/css/html/js/xml/Ajax layer and the PostgreSQL backend.
Php developers have found xHarbour/cgi fast and easy to use. Their main 
requirements were:

- hash management ( hash is "the array" in php )
- regex management
- XML management
- business graphics using gd lib
- protocols like http/smtp/ftp/pop3/cgi
- data export to spreadsheets
- i18n internationalization

xHarbour has many of these and I hope Harbour will have them in the future.

If browser/css/html/js/xml/Ajax is the UI and SQL is the backend, a 
COMPILED, fast and clean OOP language like [x]Harbour can
have its place.

regards,
Lorenzo Fiorini

From druzus at priv.onet.pl  Wed Dec  6 13:36:23 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec  6 13:37:17 2006
Subject: [Harbour] xHarbour
Message-ID: <20061206183623.GA19196@localhost.localdomain>

Hi All,

I'm forwarding this message here because it's related also
to Harbour and I think that Harbour users will find it very
interesting.
IMHO it's a milestone in making [x]Harbour really popular language.
Many thanks for xHarbour.com team.

best regards,
Przemek

=========================================================================

From: Patrick Mast <patrick.mast@xHarbour.com>
Newsgroups: xHarbour
Subject: [ANN] xHarbour Language Reference Guide

Dear xHarbour Friend,

The wait is finally over! After more than 14 months of concentrated hard
work, we are very proud to announce the availability of the first
version of "The xHarbour Language Reference Guide".

"The xHarbour Language Reference Guide" is now available as a full
featured electronic edition. It includes a well structured "Table of
Contents", a comprehensive "Index" and "Full Text Search" capabilities,
plus a powerful and user friendly, and extensive "Cross Reference Link
System". The electronic edition is now available in both PDF and CHM
file formats. The PDF file can be viewed, or printed (1 personal copy
of just over 1170 single sided letter size pages) on any platform
supporting PDF files. The CHM file is a Microsoft Compressed HTML Help
format with strong "Index", and "Full Text Search" capabilities. Both
file formats are downloadable as standard ZIP files or Windows installer
files.

As of TODAY, the xHarbour Language Reference Guide will be included
with all new xHarbour Builder purchases, and will also be available
free of charge to all xHarbour.com customers with an active Update and
Service Subscription plan.

"The xHarbour Language Reference Guide" is now available to the general
xHarbour community, on sale for just $39.00 USD until December 31st,
2006. Regular price will then revert back to $49 USD.

You may get your copy now (instant online delivery system) at
http://www.xHarbour.com/OrderDocs. Your download of "The xHarbour
Language Reference Guide" will start as soon as you complete your order.
We are confident you'll find our new online purchase and delivery system
friendly, sensible, fast, and fun to use.

An Evaluation Edition is also available as a free download from
http://www.xHarbour.com/Docs. The Evaluation Edition contains a small
subset of the 1167 topics documented, so as to demonstrate the quality
and details level of the book. The layout and structure of the
Evaluation Edition is otherwise identical to the full documentation.

Finally, a Online Edition of "The xHarbour Language Reference Guide" is
now available on the new xHDN pages at http://www.xHarbour.com/xHDN.
The Online Edition includes all 1167 topics but its usage is restricted
to 10 minutes or 10 searches per day. xHarbour.com customers with a
active Update & Service Subscription have full and unrestricted access
to the online "xHarbour Language Reference Guide" at xHDN.

Since this book and the topics it covers are aggressively being
developed we'll appreciate any input you might have about any omission
or inaccuracy. This is an ongoing project and we'll be grateful for any
idea or suggestion you may have to help us improve the xHarbour
documentation or xHarbour itself.

Version 1.1 of The xHarbour Language Reference Guide will be available
in the next 90 days, free of charge to all purchasers of the 1.0 version

Please note that xHarbour.com Inc. has spared no expense in producing
and publishing this new book. We have contracted an experienced and well
respected xBase author and developer (Hannes Ziegler) which has to-date
worked 14 months, full time job, to develop this book. This in turn
translated to an out of pocket investment of tens of thousands of US
dollars, not including indirect expenses. This investment exhausted a
huge portion of our monitory resources, and was a direct response to the
passionate input many of you have provided. Now we must ask that you
help us recover our huge investment by helping protect and enforce our
copyrights, and if at all possible please purchase your own personal
copy.

Thank you for you ongoing support.

--
Sincerely,

Patrick Mast,
xHarbour.com Inc.
http://www.xHarbour.com
From antonioharbour at gmail.com  Wed Dec  6 14:25:33 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 14:25:42 2006
Subject: [Harbour] xHarbour
In-Reply-To: <20061206183623.GA19196@localhost.localdomain>
Message-ID: <45771932.6c930b24.69d1.731c@mx.google.com>

Przemek, 

>
"The xHarbour Language Reference Guide" is now available to the general
xHarbour community, on sale for just $39.00 USD until December 31st, 2006.
Regular price will then revert back to $49 USD.
...
An Evaluation Edition is also available as a free download from
http://www.xHarbour.com/Docs. The Evaluation Edition contains a small subset
of the 1167 topics documented, so as to demonstrate the quality and details
level of the book. The layout and structure of the Evaluation Edition is
otherwise identical to the full documentation.
>

Making people to pay $39.00 USD for the docs of a GPL'ed product looks as a
shame for me.

Antonio


From antonioharbour at gmail.com  Wed Dec  6 14:59:15 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 14:59:28 2006
Subject: [Harbour] xHarbour
Message-ID: <45772117.1fe09071.7fb7.ffffbc3f@mx.google.com>

> Making people to pay $39.00 USD for the docs of a GPL'ed 
> product looks as a shame for me.

I see no problem at all to ask money for a PRINTED book, thats fine. But it
should be distributed electronically for free.

IMO its a GPL abuse.


Antonio

From druzus at priv.onet.pl  Wed Dec  6 15:33:07 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec  6 15:33:55 2006
Subject: [Harbour] xHarbour
In-Reply-To: <45771932.6c930b24.69d1.731c@mx.google.com>
References: <20061206183623.GA19196@localhost.localdomain>
	<45771932.6c930b24.69d1.731c@mx.google.com>
Message-ID: <20061206203307.GA25319@localhost.localdomain>

On Wed, 06 Dec 2006, Antonio Linares wrote:
> Making people to pay $39.00 USD for the docs of a GPL'ed product looks as a
> shame for me.

When someone does not see that they were paying for one and a half year
for two people for full time job to describe GPL product and is writing
sth like above looks as a shame for me.

best regards,
Przemek
From druzus at priv.onet.pl  Wed Dec  6 15:35:13 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec  6 15:36:01 2006
Subject: [Harbour] xHarbour
In-Reply-To: <45772117.1fe09071.7fb7.ffffbc3f@mx.google.com>
References: <45772117.1fe09071.7fb7.ffffbc3f@mx.google.com>
Message-ID: <20061206203513.GB25319@localhost.localdomain>

On Wed, 06 Dec 2006, Antonio Linares wrote:
> > Making people to pay $39.00 USD for the docs of a GPL'ed 
> > product looks as a shame for me.
> I see no problem at all to ask money for a PRINTED book, thats fine. But it
> should be distributed electronically for free.

Yes sure. Please start to distribute FWH electronically for free.
When you start please inform me so we can return to this discussion.

best regards,
Przemek
From antonioharbour at gmail.com  Wed Dec  6 15:41:06 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 15:41:14 2006
Subject: [Harbour] xHarbour
In-Reply-To: <20061206203307.GA25319@localhost.localdomain>
Message-ID: <45772ae6.4488ec35.447a.ffffc2cf@mx.google.com>

Przemek, 

> When someone does not see that they were paying for one and a 
> half year for two people for full time job to describe GPL 
> product and is writing sth like above looks as a shame for me.

They make ask for free money contributions. Lots of GPLed projects do it and
its fine.

Harbour and xHarbour source code is copyrighted and under the GPL licence.
If part of the info contained into the source code has been used for the
book (functions names, parameters names, etc.) then the book is also covered
by the GPL licence.

They can not SELL a GPLed product. Its an abuse of the GPL licence.

They can SELL a phisically printed book (asking for the cost of the book
production), but the electronic format is under the GPL licence and should
be given away for FREE.

regards,

Antonio

From antonioharbour at gmail.com  Wed Dec  6 15:43:28 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 15:43:37 2006
Subject: [Harbour] xHarbour
In-Reply-To: <20061206203513.GB25319@localhost.localdomain>
Message-ID: <45772b74.640fc3c6.503b.1c60@mx.google.com>

Przemek, 

> Yes sure. Please start to distribute FWH electronically for free.

FWH is propietary software and its NOT covered by the GPL licence.

Harbour and xHarbour are GPLed products. 

This is a GPL licence abuse, and if you are participating in this dirty
bussiness, then you are abusing too.

regards,

Antonio

From ron at profit-master.com  Wed Dec  6 18:05:15 2006
From: ron at profit-master.com (Ron Pinkas)
Date: Wed Dec  6 17:06:06 2006
Subject: [Harbour] xHarbour
In-Reply-To: <45771932.6c930b24.69d1.731c@mx.google.com>
Message-ID: <032201c7198a$fe04fef0$6711a8c0@vpcron>

Antonio,
 
> "The xHarbour Language Reference Guide" is now available to 
> the general xHarbour community, on sale for just $39.00 USD 
> until December 31st, 2006.
> Regular price will then revert back to $49 USD.
> ...
> An Evaluation Edition is also available as a free download 
> from http://www.xHarbour.com/Docs. The Evaluation Edition 
> contains a small subset of the 1167 topics documented, so as 
> to demonstrate the quality and details level of the book. The 
> layout and structure of the Evaluation Edition is otherwise 
> identical to the full documentation.
> >
> 
> Making people to pay $39.00 USD for the docs of a GPL'ed 
> product looks as a shame for me.

After years of quiet and piece of mind, that last thing on earth I want to
do is start new arguments with you yet again, but this kind of public
statement is just too outrageous to ignore.

Do you have any idea how many books documenting free products are sold every
day?

In this time, I'd guess that there are far more commercial docs of free
software, then commercial docs of non free software. The format of the docs
(printed vs. electronic, etc.) has absolutely nothing to do with it being
valid, or invalid.

These docs are completely PROPRIETARY ORIGINAL WORK, and thus not a subject
to ANY license of any kind, except the one published by it's proprietor,
xHarbour.com Inc.

Not that it has any bearing here, but if you read the GPL you'll find that
it never tries to forbid SELLING of any GPL product, the opposite is true,
it explicitly permits selling. IOW, even I started selling the very docs
delivered with the free Harbour, it would still be 100% valid.

It's time that you finally learned the GPL, because your lack of knowledge
and the resulting irresponsible public comments is indeed a shame.

Ron

From antonioharbour at gmail.com  Wed Dec  6 17:34:52 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 17:35:05 2006
Subject: [Harbour] xHarbour
In-Reply-To: <032201c7198a$fe04fef0$6711a8c0@vpcron>
Message-ID: <45774590.0938211e.2f19.ffffef0f@mx.google.com>

Ron,

In this world where we live, many things that can be done legally, are in
fact a shame for all of us.

The fact that the "The xHarbour Language Reference Guide" is a commercial
product instead of a free available documentation, its one of those cases.


Antonio

From ron at profit-master.com  Wed Dec  6 18:53:49 2006
From: ron at profit-master.com (Ron Pinkas)
Date: Wed Dec  6 17:54:40 2006
Subject: [Harbour] xHarbour
In-Reply-To: <45774590.0938211e.2f19.ffffef0f@mx.google.com>
Message-ID: <033501c71991$c6797770$6711a8c0@vpcron>

Antonio,
 
> In this world where we live, many things that can be done 
> legally, are in fact a shame for all of us.
> 
> The fact that the "The xHarbour Language Reference Guide" is 
> a commercial product instead of a free available 
> documentation, its one of those cases.

I'm here to publicly offer you, or anyone else, the opportunity to make this
"right".

You, and anyone else, are here given the opportunity to obtain the rights to
distribute the above book, free of charge, to any Harbour/xHarbour user, by
merely REIMBURSING xHarbour.com, ONLY for the OUT OF POCKET money, paid in
cash, to the author (Hannes Ziegler). IOW, you will NOT have to pay for the
work of another full time employee of xHarbour.com (Nick Van Dyck) nor the
work of Patrick or myself.

Should you be willing to put your money where your mouth is, we'll provide
you with notarized copies of exact bank records, of each and every monthly
money transfer, paid to the author.

This offer will be in effect for exactly 72 hours, starting immediately.

Ron

From philb at philb.us  Wed Dec  6 19:05:57 2006
From: philb at philb.us (Phil Barnett)
Date: Wed Dec  6 19:04:38 2006
Subject: [Harbour] xHarbour
In-Reply-To: <032201c7198a$fe04fef0$6711a8c0@vpcron>
References: <032201c7198a$fe04fef0$6711a8c0@vpcron>
Message-ID: <200612061905.57112.philb@philb.us>

On Wednesday 06 December 2006 18:05, Ron Pinkas wrote:

> Do you have any idea how many books documenting free products are sold
> every day?

Just ask O'Reilly. They have made millions providing documentation of open 
source.

Ron, I congratulate you and your team for taking the time to write a book 
about xHarbour.

Kudo's to you and your team. Documentation is hard work and is one of the 
least favorite pastimes of most programmers. That explains why we have so 
much undocumented code in Open Source.

Formalizing such a document is a great step forward.

Thank You.

-- 
My other computer is your Windows machine
From antonioharbour at gmail.com  Wed Dec  6 19:54:52 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Wed Dec  6 19:55:08 2006
Subject: [Harbour] xHarbour
In-Reply-To: <033501c71991$c6797770$6711a8c0@vpcron>
Message-ID: <45776660.6c6d5298.2bde.ffff9e19@mx.google.com>

Ron,

> I'm here to publicly offer you, or anyone else, the 
> opportunity to make this "right".

You can make it right, yourself:

Create a PayPal account and accept donations, sourceforge itself helps on
this. 

Surely more than 72 hours are needed, but once the docs production costs are
satisfied, then make the Harbour docs free and availables to everybody.


Antonio

From ron at profit-master.com  Wed Dec  6 21:51:32 2006
From: ron at profit-master.com (Ron Pinkas)
Date: Wed Dec  6 20:52:20 2006
Subject: [Harbour] xHarbour
In-Reply-To: <45776660.6c6d5298.2bde.ffff9e19@mx.google.com>
Message-ID: <035b01c719aa$9a3bbf10$6711a8c0@vpcron>

Antonio,

> > I'm here to publicly offer you, or anyone else, the opportunity to 
> > make this "right".
> 
> You can make it right, yourself:
> 
> Create a PayPal account and accept donations, sourceforge 
> itself helps on this. 
> 
> Surely more than 72 hours are needed, but once the docs 
> production costs are satisfied, then make the Harbour docs 
> free and availables to everybody.

[As expected, giving away OTHER PEOPLE'S MONEY is far easier than giving
away one's own money.]

We already made it right from inception.

We invested our own money, a very substantial sum, hiring a respected
author, with excellent track record in the xBase world, to develop
*original* and extensive (more than 1,400 full pages) documentation. The
resulting docs, are an exclusive copyright property of xHarbour.com Inc.,
and are protected under international intellectual property laws.

Any *objective* person with basic common sense, would understand that
*original* documentation of ANY product, publicly available, can NEVER be
subject to any terms of any 3rd party.

I can develop docs even of YOUR product, and sell such docs, without even
having to ask your permission. What one develops from scratch, is his
property, as long as it doesn't include portions which someone else can
prove are copied from some other body of copyrighted work, without
permission.

Yet you had the nerve to claim that we somehow violated the copyrights of
<who exactly?>. Who's original work did we shamelessly stole? Do you claim
any portions of our docs are copied? If so please specify which portions,
and substantiate the origin of such portions.

The idea the you somehow think that Function Names, or Argument Names, are
protected by copyright laws, is beyond SHAMELESS, because it means that you
INTENTIONALLY violated copyright of Computer Associates, which knowingly
violated copyright of Ashton Tate, which is the sole owner of such Function
Names, if such copyright existed.

Shame on you, and apology is the only good answer you may provide.

Read you own words, what you did maybe legal, but it certainly is shameless,
and the clear result of blind bias. It's time to rid yourself of that bias,
and help us support [x]Harbour, instead of repeatedly dragging us through
such negativity storms.

Ron

From antonioharbour at gmail.com  Thu Dec  7 03:08:19 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Thu Dec  7 03:08:29 2006
Subject: [Harbour] xHarbour
In-Reply-To: <035b01c719aa$9a3bbf10$6711a8c0@vpcron>
Message-ID: <4577cbf8.7736fa68.5ec5.3848@mx.google.com>

http://sourceforge.net/docs/D02/en/

http://www.gnu.org/help/donate.html

http://www.profit-master.com/Ron's_Fave/index.htm


Antonio

From antonioharbour at gmail.com  Thu Dec  7 03:10:27 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Thu Dec  7 03:10:36 2006
Subject: [Harbour] xHarbour
Message-ID: <4577cc78.44d20be1.7c5f.37b8@mx.google.com>

http://www.profit-master.com/




From jfl at mafact.com  Thu Dec  7 03:27:00 2006
From: jfl at mafact.com (J. Lefebvre)
Date: Thu Dec  7 03:28:31 2006
Subject: [Harbour] xHarbour
Message-ID: <mailman.6.1165480111.3340.harbour@harbour-project.org>

Antonio,

What do you want to prove ?

A few days ago, you where afraid we lose most of our programmers before to have a finished product...

This kind of discussion, where for 'my part' your are wrong, is clearly what the programmer does'nt like to see.

I remember endlees discussion totally out of topic, and mostly for nothing.


Please, you said what you think, so everybody know your point of vue. You also know now that this is not the most accepted point of view.

I think we can stop this now.

Regards,

JF,


PS:This will be my only one intervention about this topic.


From antonioharbour at gmail.com  Thu Dec  7 03:47:43 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Thu Dec  7 03:47:53 2006
Subject: [Harbour] xHarbour
In-Reply-To: <4577d0b0.6a46e9c7.4762.545fSMTPIN_ADDED@mx.google.com>
Message-ID: <4577d535.0ea18d0a.695d.4d71@mx.google.com>

JF, 

> What do you want to prove ?

That in the sense of the "GPL spirit", a free product should offer a free
and fully available documentation to everybody.

I have shown that there are ways to make it happen using donations, and
other ways in a "profit-master" spirit.

regards,

Antonio

From sscc at mweb.co.za  Thu Dec  7 07:27:44 2006
From: sscc at mweb.co.za (Alex Strickland)
Date: Thu Dec  7 07:28:36 2006
Subject: [Harbour] xHarbour
In-Reply-To: <4577d535.0ea18d0a.695d.4d71@mx.google.com>
References: <4577d535.0ea18d0a.695d.4d71@mx.google.com>
Message-ID: <457808C0.6060805@mweb.co.za>

Antonio Linares wrote:

> That in the sense of the "GPL spirit", a free product should offer a free
> and fully available documentation to everybody.

Write it yourself at your expense.

Regards
Alex

From r at astral-it.com  Thu Dec  7 08:40:08 2006
From: r at astral-it.com (roman modic)
Date: Thu Dec  7 11:43:06 2006
Subject: [Harbour] xHarbour
References: <45772117.1fe09071.7fb7.ffffbc3f@mx.google.com>
Message-ID: <017f01c71a05$36b1a940$0201a8c0@MASTERMIND>

Hello!

----- Original Message ----- 
From: "Antonio Linares" <antonioharbour@gmail.com>
To: "'Harbour Project Main Developer List.'" <harbour@harbour-project.org>
Sent: Wednesday, December 06, 2006 8:59 PM
Subject: RE: [Harbour] xHarbour


>> Making people to pay $39.00 USD for the docs of a GPL'ed 
>> product looks as a shame for me.
> 
> I see no problem at all to ask money for a PRINTED book, thats fine. But it
> should be distributed electronically for free.
> 
> IMO its a GPL abuse.

I don't know if it is an abuse of GPL. What about O'Reilly Safari:
http://desicritics.org/2006/11/21/031918.php
http://safari.oreilly.com/whysafari

But I also think that price is maybe too high for an electronic edition.

For example, the famous Delphi book can be bought again
for $25 (paperback) http://www.lulu.com/content/435417
thanks to the "print on demand" publisher Lulu!

Here are some interesting examples ;)
"Spaghetti Code" (price for download $2.78)
http://www.lulu.com/content/498784
[quote]
This is a delicious compilation of various programs, applications, and cartoons 
that I have created over the years using a variety of tools and programming 
languages, most notably Basic, dBase, Clipper, C, awk, sed, SQL, shell scripting, 
and india ink. DO NOT BUY THIS BOOK TO LEARN HOW TO PROGRAM! This 
is more of a book on how NOT to program. However, if you are an experienced 
programmer and enjoy viewing code as a logic puzzle, or you would just like to 
own a collection of some of the most hilarious cartoons and arcane algorithms 
you are ever likely to come across, then by all means, spend a few bucks and 
download a copy of my book. That way you can convert the PDF to text and cut 
and paste the routines that you would like to use rather than having to key them 
in from scratch. Enjoy!
[/quote]

"CASFILER - ANATOMY OF A CLIPPER APPLICATION"
http://www.lulu.com/content/516568 (price for download $2.43)
[quote]
The is the complete user manaual and program listing for "CASFILER," a DOS 
based Clipper database application I developed some years ago that is woefully 
archaic by today's standards, but nonetheless will provide a enlightening view of 
how complex the development of even the simplest "useful" PC database 
applications can be. If you aspire to be a "coder," this work will provide a clear 
model of how deeply you must address not only the functional aspects of your 
shareware applications, but also the documentation and user support issues as 
well in order for the applications to be considered genuinely useful. For an 
additional $5.00 you can receive the executable via email or delivered on CD.
[/quote]

"The Pirate Ship Mystery"
http://www.lulu.com/content/128045 (price for download $10.36)
[quote]
The Pirate Ship Mystery is a story of how one afternoon Tash had a great idea.
A few tall tales of spooks and ghosts lurking around Oban had been told down the 
harbour. So he decided to organise his very own 'Ghost Tour Guide Service'.
[quote]

Regards, ROman

From druzus at priv.onet.pl  Fri Dec  8 00:01:58 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec  8 00:04:30 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061208050158.GA11190@localhost.localdomain>

2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/bin/hb-func.sh
  * harbour/bin/hb-mkslib.sh
  * harbour/bin/postinst.sh
  * harbour/config/bsd/gcc.cf
  * harbour/config/darwin/gcc.cf
  * harbour/config/dos/owatcom.cf
  * harbour/config/hpux/gcc.cf
  * harbour/config/linux/gcc.cf
  * harbour/config/linux/owatcom.cf
  * harbour/config/os2/gcc.cf
  * harbour/config/sunos/gcc.cf
  * harbour/config/w32/watcom.cf
  * harbour/contrib/rdd_ads/ads1.c
  * harbour/contrib/rdd_ads/adsfunc.c
  * harbour/include/hbapifs.h
  * harbour/include/hbexprc.c
  * harbour/include/hbsetup.h
  * harbour/source/common/expropt2.c
  * harbour/source/common/hbdate.c
  * harbour/source/common/hbgete.c
  * harbour/source/common/hbstr.c
  * harbour/source/common/hbver.c
  * harbour/source/common/hbverdsp.c
  * harbour/source/compiler/cmdcheck.c
  * harbour/source/compiler/fixflex.c
  * harbour/source/compiler/gencobj.c
  * harbour/source/compiler/genobj32.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.l
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbfix.c
  * harbour/source/compiler/hbfunchk.c
  * harbour/source/pp/ppcore.c
  * harbour/source/pp/ppgen.c
  * harbour/source/pp/pplib.c
  * harbour/source/rdd/dbcmd.c
  * harbour/source/rdd/workarea.c
  * harbour/source/rdd/dbfcdx/dbfcdx1.c
  * harbour/source/rdd/dbffpt/dbffpt1.c
  * harbour/source/rdd/hsx/hsx.c
  * harbour/source/rtl/accept.c
  * harbour/source/rtl/ampm.c
  * harbour/source/rtl/console.c
  * harbour/source/rtl/defpath.c
  * harbour/source/rtl/errorint.c
  * harbour/source/rtl/filesys.c
  * harbour/source/rtl/fkmax.c
  * harbour/source/rtl/fstemp.c
  * harbour/source/rtl/hbffind.c
  * harbour/source/rtl/hbgtcore.c
  * harbour/source/rtl/langapi.c
  * harbour/source/rtl/seconds.c
  * harbour/source/rtl/set.c
  * harbour/source/rtl/tobject.prg
  * harbour/source/rtl/transfrm.c
  * harbour/source/rtl/gtcrs/chrmap.c
  * harbour/source/rtl/gtcrs/gtcrs.c
  * harbour/source/rtl/gtcrs/gtcrs.h
  * harbour/source/rtl/gtpca/gtpca.c
  * harbour/source/rtl/gtwvt/gtwvt.c
  * harbour/source/rtl/gtxwc/gtxwc.c
  * harbour/source/vm/classes.c
  * harbour/source/vm/cmdarg.c
  * harbour/source/vm/debug.c
  * harbour/source/vm/estack.c
  * harbour/source/vm/fm.c
  * harbour/source/vm/hvm.c
  * harbour/source/vm/macro.c
  * harbour/source/vm/proc.c
  * harbour/source/vm/runner.c
  * harbour/utils/hbmake/hbmlang.c
  * harbour/utils/hbpp/hbpp.c
  * harbour/utils/hbpp/hbppcomp.c
  * harbour/utils/hbpp/hbppcore.c
  * harbour/utils/hbpp/hbpplib.c
  * harbour/utils/hbpp/pragma.c
  * harbour/utils/hbver/hbverfix.c
    * general code cleanup: all strcpy() and strcat() replaced hb strn*()
      and hb_strn*(), sprintf() by snprintf(), etc.
      It fixed some possible buffer overflow but it's also possible that
      it will exploit some some hidden so far problems but I strongly
      prefer to know about them ASAP to fix them before final 1.0 release.
    ! fixed bug I introduce in codeblock falgs which disabled early macro
      evaluation in codeblocks.
    ! added missing protection against execution by bison destructor for
      used CBSTART token on syntax error.
    % use PP stringify logik added for FLEX support to remove all redundant
      spaces in stringified for early macro evaluation codeblocks and add
      spaces between operators if after preprocessing they were removed.
      Now we are supporting also some code which cannot be compiled by
      Clipper.
    % cleaned and improved the speed of printer redirecting in console code.
      Chen please check if CG still reports problems and if not ubdate
      TODO/TOFIX or inform me about them.
    * some cleanups in building process for different *nixes: MacOSX, SunOS,
      *BSD, etc.
    * removed not longer necessary (I hope) compiler flag to force default
      'char' type as signed. Now Harbour should work with signed and unsigned
      char without any problems. To other developers: please remember that
      when you are using 'char' as 8 bytes signed integer then it's a bug.
      Always explicitly use: 'signed char' in such case. On some platforms
      it's not possible to set default type for 'char' so if you hardcode
      that 'char' is signed or unsigned somewhere then code will not be
      portable. Chen if you will find a while to also rebuild Harbour with
      BCC and -K switch to make some tests with CG then I'll be thankful.

best regards,
Przemek
From lorenzo.fiorini at gmail.com  Fri Dec  8 03:50:45 2006
From: lorenzo.fiorini at gmail.com (Lorenzo Fiorini)
Date: Fri Dec  8 03:50:49 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061208050158.GA11190@localhost.localdomain>
References: <20061208050158.GA11190@localhost.localdomain>
Message-ID: <9257026e0612080050h79a855f8lbb78fad083abcb64@mail.gmail.com>

My env is:
HB_MULTI_GT=YES
HB_GT_DEFAULT=gtcgi
HB_GT_LIB=gtcrs
HB_GT_CROSS_LIB=gtwvt

it works with xHarbour but Harbour 2006-12-08 05:55 UTC+0100 Przemyslaw
Czerpak (druzus/at/priv.onet.pl) gives the errors below.

regards,
Lorenzo Fiorini

/usr/bin/ld: cannot find -lgtcgi
collect2: ld returned 1 exit status
make[3]: *** [hbrun] Error 1
make[2]: *** [descend] Error 2
/usr/bin/ld: cannot find -lgtcgi
collect2: ld returned 1 exit status
make[3]: *** [hbdoc] Error 1
make[2]: *** [descend] Error 2
/usr/bin/ld: cannot find -lgtcgi
collect2: ld returned 1 exit status
make[3]: *** [hbtest] Error 1
make[2]: *** [descend] Error 2
/usr/bin/ld: cannot find -lgtcgi
collect2: ld returned 1 exit status
make[3]: *** [hbmake] Error 1
make[2]: *** [descend] Error 2
make[1]: *** [first] Error 2
/usr/bin/ld: cannot find -lgtcgi
collect2: ld returned 1 exit status
make[4]: *** [readfile] Error 1
make[3]: *** [^^^d^e^s^c^e^n^d^^^] Error 2
make[2]: *** [first] Error 2
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061208/c8be5ad1/attachment.html
From druzus at priv.onet.pl  Fri Dec  8 06:14:02 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec  8 06:14:51 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <9257026e0612080050h79a855f8lbb78fad083abcb64@mail.gmail.com>
References: <20061208050158.GA11190@localhost.localdomain>
	<9257026e0612080050h79a855f8lbb78fad083abcb64@mail.gmail.com>
Message-ID: <20061208111402.GA11559@localhost.localdomain>

On Fri, 08 Dec 2006, Lorenzo Fiorini wrote:
> My env is:
> HB_MULTI_GT=YES

HB_MULTI_GT is not necessary in Harbour. There is no single GT mode.

> HB_GT_DEFAULT=gtcgi
> HB_GT_LIB=gtcrs

I can add support for different default and build GT in a while but
in fact HB_GT_DEFAULT exists for some historical reasons only and can
be safely removed from Harbour and xHarbour. Just simply use:
    HB_GT_LIB=gtcgi
It should be enough. If it isn't then please inform me what is missing.
Probably instead of adding HB_GT_DEFAULT to GNU make files I should
remove it at all.
If you remove HB_GT_DEFAULT then you will be able to build Harbour without
link errors.
BTW please note that in Harbour GTCGI and GTSTD are internally much differ
then in xHarbour. GTSTD can be used as full screen GT (of course very limited)
and both support internally all GT operations like save/rest screen, etc.
The output is also differ anyhow I think it's much closer to sth what user
may needs.

> HB_GT_CROSS_LIB=gtwvt

I do not know what it is.

best regards,
Przemek
From lorenzo.fiorini at gmail.com  Fri Dec  8 08:37:55 2006
From: lorenzo.fiorini at gmail.com (Lorenzo Fiorini)
Date: Fri Dec  8 08:37:59 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061208111402.GA11559@localhost.localdomain>
References: <20061208050158.GA11190@localhost.localdomain>
	<9257026e0612080050h79a855f8lbb78fad083abcb64@mail.gmail.com>
	<20061208111402.GA11559@localhost.localdomain>
Message-ID: <9257026e0612080537n6775772dnf7a7690433015619@mail.gmail.com>

On 12/8/06, Przemyslaw Czerpak <druzus@priv.onet.pl> wrote:
>
>
> If you remove HB_GT_DEFAULT then you will be able to build Harbour without
> link errors.


Thanks, I'll try.
Is there any technical reason why Harbour gt system and xHarbour's one are
so different?


> HB_GT_CROSS_LIB=gtwvt
>
> I do not know what it is.


Sorry, it is my envvar for mingw32 cross builds. I forgot to delete it.
BTW I use HB_CFG_FILE to have different harbour.cfg and it seems Harbour
doesn't support it.
Any workaround?

regards,
Lorenzo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061208/c07566fe/attachment.html
From mpaliwoda at interia.pl  Fri Dec  8 12:23:14 2006
From: mpaliwoda at interia.pl (Marek Paliwoda)
Date: Fri Dec  8 12:23:27 2006
Subject: [Harbour] Compilation error ?
Message-ID: <45799F82.6070301@interia.pl>

Hi Przemek,

The following example compiled OK before
changes to a harbour compiler :

PROCEDURE Main()
     LOCAL decl
     decl := Left( 'aa', 1 )
RETURN

Now it blows with :
   Error E0030  Syntax error: "syntax error at ':='".


I wonder however why the following :

PROCEDURE Main()
     LOCAL priv
     priv := Left( 'aa', 1 )
RETURN

compiles OK with current harbour.

-- 

Marek

----------------------------------------------------------------------
Telewizja Polsat i INTERIA.PL zapraszaja na charytatywne aukcje. 
Udziel wsparcia Klinice Onkologii w Warszawie! 
Licytuj przedmioty z serialu Samo Zycie > http://link.interia.pl/f19d5

From druzus at priv.onet.pl  Fri Dec  8 14:10:11 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec  8 14:11:02 2006
Subject: [Harbour] Compilation error ?
In-Reply-To: <45799F82.6070301@interia.pl>
References: <45799F82.6070301@interia.pl>
Message-ID: <20061208191011.GA26002@localhost.localdomain>

On Fri, 08 Dec 2006, Marek Paliwoda wrote:
> Hi Przemek,
> The following example compiled OK before
> changes to a harbour compiler :
> PROCEDURE Main()
>     LOCAL decl
>     decl := Left( 'aa', 1 )
> RETURN
> Now it blows with :
>   Error E0030  Syntax error: "syntax error at ':='".

Typo in one condition. I'll fix it in a while.

> I wonder however why the following :
> PROCEDURE Main()
>     LOCAL priv
>     priv := Left( 'aa', 1 )
> RETURN
> compiles OK with current harbour.

It should. In current code I can quite easy remove all limitations
on any reserved words. F.e. FUNC[TION], PROC[EDURE] still cannot be
used in other context but I kept it only of compatibility with old
code. There is much more of such things.
It's not very important for me but we should decide if we want to
keep strict Clipper compatibility (the DECL above is my mistake
not intentional behavior) or eliminate all limitations.

best regards,
Przemek
From mpaliwoda at interia.pl  Fri Dec  8 14:33:00 2006
From: mpaliwoda at interia.pl (Marek Paliwoda)
Date: Fri Dec  8 14:33:07 2006
Subject: [Harbour] Compilation error ?
In-Reply-To: <45799F82.6070301@interia.pl>
References: <45799F82.6070301@interia.pl>
Message-ID: <4579BDEC.1070606@interia.pl>

Hi Przemek,

 >> I wonder however why the following :
 >> PROCEDURE Main()
 >>     LOCAL priv
 >>     priv := Left( 'aa', 1 )
 >> RETURN
 >> compiles OK with current harbour.
 >
 >It should. In current code I can quite easy remove all limitations
 >on any reserved words. F.e. FUNC[TION], PROC[EDURE] still cannot be
 >used in other context but I kept it only of compatibility with old
 >code. There is much more of such things.
 >It's not very important for me but we should decide if we want to
 >keep strict Clipper compatibility (the DECL above is my mistake
 >not intentional behavior) or eliminate all limitations.

I was pointing out to the inconsistency in a compiler's behavior.
I am in favor of *removing* all limitations (including FUNC/PROC)
if possible, but I realise that this may generate an incompatibility
with old Clipper code. Maybe it would be possible to add another
-k<c> switch to the compiler to control this behavior ?

-- 

Marek

----------------------------------------------------------------------
Telewizja Polsat i INTERIA.PL zapraszaja na charytatywne aukcje. 
Udziel wsparcia Klinice Onkologii w Warszawie! 
Licytuj przedmioty z serialu Samo Zycie > http://link.interia.pl/f19d5

From jfl at mafact.com  Fri Dec  8 16:14:00 2006
From: jfl at mafact.com (J. Lefebvre)
Date: Fri Dec  8 16:15:13 2006
Subject: [Harbour] Compilation error ?
Message-ID: <mailman.0.1165612513.3497.harbour@harbour-project.org>

Hi Marek, Hi Przemek

I dont think that removing those limitation could break clipper code.

Surely, new harbour code using some var like func or proc, would not be usable with clipper but ... really who would like to do so ?

I vote for removing all limitation.

JF,

-----Original Message-----
From: harbour-bounces@harbour-project.org [mailto:harbour-bounces@harbour-project.org] On Behalf Of Marek Paliwoda
Sent: Friday, December 08, 2006 8:33 PM
To: Harbour Project Main Developer List.
Subject: Re: [Harbour] Compilation error ?

Hi Przemek,

 >> I wonder however why the following :
 >> PROCEDURE Main()
 >>     LOCAL priv
 >>     priv := Left( 'aa', 1 )
 >> RETURN
 >> compiles OK with current harbour.
 >
 >It should. In current code I can quite easy remove all limitations
 >on any reserved words. F.e. FUNC[TION], PROC[EDURE] still cannot be
 >used in other context but I kept it only of compatibility with old
 >code. There is much more of such things.
 >It's not very important for me but we should decide if we want to
 >keep strict Clipper compatibility (the DECL above is my mistake
 >not intentional behavior) or eliminate all limitations.

I was pointing out to the inconsistency in a compiler's behavior.
I am in favor of *removing* all limitations (including FUNC/PROC)
if possible, but I realise that this may generate an incompatibility
with old Clipper code. Maybe it would be possible to add another
-k<c> switch to the compiler to control this behavior ?

-- 

Marek

----------------------------------------------------------------------
Telewizja Polsat i INTERIA.PL zapraszaja na charytatywne aukcje. 
Udziel wsparcia Klinice Onkologii w Warszawie! 
Licytuj przedmioty z serialu Samo Zycie > http://link.interia.pl/f19d5

_______________________________________________
Harbour mailing list
Harbour@harbour-project.org
http://lists.harbour-project.org/mailman/listinfo/harbour


From randy at palmasdev.com  Fri Dec  8 17:17:18 2006
From: randy at palmasdev.com (Randy Portnoff)
Date: Fri Dec  8 17:20:59 2006
Subject: [Harbour] MemoLine() incompatibility
Message-ID: <5.2.0.9.0.20061208170702.021add18@pop3.pathcom.com>

Hi all,

Regarding this MemoLine() issue I keep harping about, I think I found a fix 
- The problem occurs with the following code:

FUNC TEST()
LOCAL T := "FIRST LINE------X SECOND LINE" + CHR(13) + CHR(10) + 
"   INDENTED LINE"
? MEMOLINE( T, 17, 1 )
? MEMOLINE( T, 17, 2 )
? MEMOLINE( T, 17, 3 )
RETURN NIL

This can be fixed by changing this...

if( ulLines < ulLineNumber )
{
    ulLineBegin = ulPos - ulCurLength + 1 + ulTrailingBlanks;
    ulLineEnd   = 0;
}

...to this...

if( ulLines < ulLineNumber )
{
    ULONG ulTrailingBlanks = 0;
    while( ulPos + ulTrailingBlanks < ulLen && pszString[ ulPos + 
ulTrailingBlanks ] == ' ' )
       ulTrailingBlanks++;

    ulLineBegin = ulPos - ulCurLength + 1 + ulTrailingBlanks;
    ulLineEnd   = 0;

    if ( ulTrailingBlanks > 1 )
       ulPos += ulTrailingBlanks - 1;
}

Here are the results:

Clipper 5.2e:
FIRST LINE------X
SECOND LINE
    INDENTED LINE

Harbour (existing):
FIRST LINE------X
  SECOND LINE
    INDENTED LINE

Harbour (proposed):
FIRST LINE------X
SECOND LINE
    INDENTED LINE

Does anyone object to me making this change?

TIA.

Regards,
Randy.

From druzus at priv.onet.pl  Sat Dec  9 05:21:43 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec  9 05:22:32 2006
Subject: [Harbour] Compilation error ?
In-Reply-To: <4579BDEC.1070606@interia.pl>
References: <45799F82.6070301@interia.pl> <4579BDEC.1070606@interia.pl>
Message-ID: <20061209102143.GA32102@localhost.localdomain>

On Fri, 08 Dec 2006, Marek Paliwoda wrote:
> >It should. In current code I can quite easy remove all limitations
> >on any reserved words. F.e. FUNC[TION], PROC[EDURE] still cannot be
> >used in other context but I kept it only of compatibility with old
> >code. There is much more of such things.
> >It's not very important for me but we should decide if we want to
> >keep strict Clipper compatibility (the DECL above is my mistake
> >not intentional behavior) or eliminate all limitations.
> I was pointing out to the inconsistency in a compiler's behavior.
> I am in favor of *removing* all limitations (including FUNC/PROC)
> if possible, but I realise that this may generate an incompatibility
> with old Clipper code. Maybe it would be possible to add another
> -k<c> switch to the compiler to control this behavior ?

I was talking about compatibility with old harbour code. In this case
with FLEX based lexer. When I was working on new lexer I tried to make
it as close to FLEX one as possible. But later I've found that there
are some problems with it and I cannot keep new code strict compatible
without replicating some bugs.
Removing restrictions on reserved words should not break Clipper code
compatibility. Probably we can keep some error messages and use them
when -kc switch is used - it should help people who are creating code
which should be also compiled by Clipper to check it though even now
in few cases we haven't replicated all Clipper restrictions and personally
I do not want to invest my time in replicating them.

best regards,
Przemek
From elart at elart.it  Sat Dec  9 07:26:33 2006
From: elart at elart.it (elart)
Date: Sat Dec  9 07:27:15 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw
	Czerpak (druzus/at/priv.onet.pl)
In-Reply-To: <20061208050158.GA11190@localhost.localdomain>
References: <20061208050158.GA11190@localhost.localdomain>
Message-ID: <1165667194.8197.21.camel@localhost.localdomain>

Il giorno ven, 08/12/2006 alle 06.01 +0100, Przemyslaw Czerpak ha
scritto:

On Fedora core 5 Harbour builds fine

On Ubuntu 6.10 before this 

> 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)

building Harbour was OK


Now i get stacks protection

*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [achoice.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [harbinit.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [dbdelim.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [dbgmenu.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [first] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [pretest.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbrun.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbdoc.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbtest.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbmake.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [first] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [tbtree.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [ohtm.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [color.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [fileread.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [aading.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [todbc.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [first] Error 2
make: *** [first] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [achoice.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [harbinit.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [dbdelim.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [dbgmenu.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [install] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [pretest.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbrun.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbdoc.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbtest.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [hbmake.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [install] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [tbtree.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [ohtm.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [color.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [fileread.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [aading.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
*** stack smashing detected
***: ../../../../source/compiler/linux/gcc/harbour terminated
make[3]: *** [todbc.c] Aborted (core dumped)
make[2]: *** [descend] Error 2
make[1]: *** [install] Error 2
make: *** [install] Error 2


Now i'm tryng to play with 
 
CFLAGS="-fno-stack-protector"

flag

http://www.debian-administration.org/articles/408

HTH

From druzus at priv.onet.pl  Sat Dec  9 09:55:32 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec  9 09:56:19 2006
Subject: [Harbour] ChangeLog 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <1165667194.8197.21.camel@localhost.localdomain>
References: <20061208050158.GA11190@localhost.localdomain>
	<1165667194.8197.21.camel@localhost.localdomain>
Message-ID: <20061209145532.GA32539@localhost.localdomain>

On Sat, 09 Dec 2006, elart wrote:
> Il giorno ven, 08/12/2006 alle 06.01 +0100, Przemyslaw Czerpak ha
> scritto:
> On Fedora core 5 Harbour builds fine
> On Ubuntu 6.10 before this 
> > 2006-12-08 05:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
> building Harbour was OK
> Now i get stacks protection
> *** stack smashing detected
> ***: ../../../../source/compiler/linux/gcc/harbour terminated
> make[3]: *** [achoice.c] Aborted (core dumped)
> make[2]: *** [descend] Error 2
> *** stack smashing detected

Thanks for the info (also for the previous message).
It's possible that recent modifications exploited some old bugs.
our hb_strn*() functions always store 0 at last byte in buffer.
Even if it causes visible problems with current build then now
we've got a chance to fix them. In few minutes I'll commit some
fixes for too small stack buffers I located so far and it's
possible that their resolve also this problem.

> Now i'm tryng to play with 
> CFLAGS="-fno-stack-protector"

It's not good idea. Such protection is very good tool to detect
possible problems. With hb_strn*() functions which are exploiting
possible problems on each call we should quite easy fix all dangerous
places in core code which existed for a long time.
Can you compile harbour with -g GCC flag and execute harbour compilation
in GDB debugger and then send me the C call stack? It will show the exact
place. Now I do not have any machine with GCC 4.1 so I cannot replicate
it myself. In next week I'll be updating one of my Linux machine and I'll
install GCC 4.1.
I hope that Chen can send Code Guard logs so we can also verify current
code with BCC.

best regards,
Przemek
From druzus at priv.onet.pl  Sat Dec  9 11:11:47 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec  9 11:12:51 2006
Subject: [Harbour] ChangeLog 2006-12-09 17:10 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061209161147.GB1210@localhost.localdomain>

2006-12-09 17:10 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/config/bsd/gcc.cf
  * harbour/config/darwin/gcc.cf
  * harbour/config/dos/bcc16.cf
  * harbour/config/dos/djgpp.cf
  * harbour/config/dos/owatcom.cf
  * harbour/config/dos/rsx32.cf
  * harbour/config/hpux/gcc.cf
  * harbour/config/linux/gcc.cf
  * harbour/config/linux/owatcom.cf
  * harbour/config/os2/gcc.cf
  * harbour/config/os2/icc.cf
  * harbour/config/sunos/gcc.cf
  * harbour/config/w32/bcc32.cf
  * harbour/config/w32/gcc.cf
  * harbour/config/w32/mingw32.cf
  * harbour/config/w32/msvc.cf
  * harbour/config/w32/rsxnt.cf
  * harbour/config/w32/watcom.cf
    * added respecting HB_GT_DEFAULT, though it's quite possible that I'll
      remove it at all soon.
    * some other cleanup

  * harbour/source/compiler/complex.c
    ! fixed wrongly replicated from FLEX lexer condition used to DECLARE.
      Now they should be the same as in FLEX lexer but IMHO they are not
      Clipper compatible.

  * harbour/source/compiler/gencli.c
  * harbour/source/compiler/gencobj.c
  * harbour/source/compiler/genhrb.c
  * harbour/source/compiler/genjava.c
  * harbour/source/compiler/genobj32.c
  * harbour/source/compiler/harbour.c
  * harbour/source/rtl/hbffind.c
  * harbour/source/pp/ppcore.c
  * harbour/source/rdd/workarea.c
    ! fixed sizes of some C stack buffers and strncpy() parameters
    * use hb_strn*() instead of strn*() in few places to be sure that 0
      is always stored in destination buffer

  * harbour/source/rtl/gtcgi/gtcgi.c
    * change reported GT name from "Standard stream console" to
      "Raw stream console" to make it differ then GTSTD one.

best regards,
Przemek
From niki at synel.co.il  Sun Dec 10 03:36:06 2006
From: niki at synel.co.il (Chen Kedem)
Date: Sun Dec 10 03:34:36 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-09 17:10 UTC+0100
	Przemyslaw Czerpak
Message-ID: <457BC6F6.E4B@synel.co.il>

Przemek,

Harbour complied and run without any CG errors.
BCC32 gives 12 warnings in: harboury.c, macroy.c, macro.y
(there used to be much more warnings there)

HBTest.exe and HPPPtest.exe results are the same as used to be.

All of my test programs I usualy run, passed without any CG error,
apart from the known CG issue here:

> cleaned and improved the speed of printer redirecting in console
> code. Chen please check if CG still reports problems.

It is the same CG bug as it used to be, the following valid code
gives access error on the memcpy line, it somehow optimize the 3
byts s_szCrLf buffer and try to access 4 bytes of it. The problem can
be bypassed if I use: static char s_szCrLf[4] = { 0x0d, 0x0a, 0 };
I don't think we should use a 4 bytes CRLF buffer in BCC32 just to
make CG happy, it looks like a hack.

------
#include <mem.h>
int main( int argc, char *argv[] )
{
  static char s_szCrLf[3] = { 0x0d, 0x0a, 0 };
  char buf[ 256 ];
  memcpy( buf, s_szCrLf, 2 );
  return 0;
}
------


  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From druzus at priv.onet.pl  Mon Dec 11 08:43:56 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec 11 08:44:46 2006
Subject: [Harbour] ChangeLog 2006-12-11 14:40 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061211134356.GA10866@localhost.localdomain>

2006-12-11 14:40 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/contrib/rdd_ads/ads1.c
  * harbour/contrib/rdd_ads/adsfunc.c
  * harbour/source/rdd/dbfcdx/dbfcdx1.c
  * harbour/source/rdd/hsx/hsx.c
    * synced with xHarbour

  * harbour/source/rtl/gtsln/gtsln.h
    * changed #if to #ifdef to avoid problems with some unofficially
      patched slang versions

best regards,
Przemek
From druzus at priv.onet.pl  Tue Dec 12 10:24:27 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 12 10:25:16 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-09 17:10
	UTC+0100 Przemyslaw Czerpak
In-Reply-To: <457BC6F6.E4B@synel.co.il>
References: <457BC6F6.E4B@synel.co.il>
Message-ID: <20061212152427.GA17226@localhost.localdomain>

On Sun, 10 Dec 2006, Chen Kedem wrote:
> > cleaned and improved the speed of printer redirecting in console
> > code. Chen please check if CG still reports problems.
> It is the same CG bug as it used to be, the following valid code
> gives access error on the memcpy line, it somehow optimize the 3
> byts s_szCrLf buffer and try to access 4 bytes of it. The problem can
> be bypassed if I use: static char s_szCrLf[4] = { 0x0d, 0x0a, 0 };
> I don't think we should use a 4 bytes CRLF buffer in BCC32 just to
> make CG happy, it looks like a hack.

Chen it may not be only CG problem. It's quite common bug in many
C compilers which can appear in optimization process. Instead of
copping bytes they make ulSize >>= 2 and copy 32bit integers. Then
the rest as bytes. Usually C compilers generate code to read the rest
also as 32bit integer and only store read data using byte memory access.
Nothing wrong happens in such case though some systems like CG will
report invalid memory access on read. But in the past I many times
exploited C compiler bugs and writing was also in bigger then byte
peaces. AFAIR I've even seen some workarounds for such problem with
MSC in Harbour code with some Victor's note. Personally I do not see
anything wrong in adding one byte more in this static buffer. In fact
we will not change anything because we will only equal the size to
used alignment. If it also silent the false CG message then good.
It's a chance that in the future we will not ignore some other messages
which will point to _REAL_ problem (f.e. in writing not reading).
IMHO if you can confirm that it clean the CG messages then you should
change it and commit. As I said it will not cost us anything in final
binaries.

best regards,
Przemek
From druzus at priv.onet.pl  Tue Dec 12 10:25:21 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 12 10:26:08 2006
Subject: [Harbour] ChangeLog 2006-12-11 22:15 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061212152521.GA17268@localhost.localdomain>

2006-12-11 22:15 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/source/rtl/memoline.c
    ! added fix sent to me by Randy Portnoff - it's a little bit differ
      then the one Randy sent to list but this one seems to be correct.
      I never used this function in Clipper and made only very basic
      tests. I believe that Randy make better tests and this fix will
      not break some other constructions.

best regards,
Przemek
From druzus at priv.onet.pl  Tue Dec 12 10:25:52 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 12 10:26:40 2006
Subject: [Harbour] ChangeLog 2006-12-12 14:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061212152552.GB17268@localhost.localdomain>

2006-12-12 14:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbstack.h
    ! fixed typo in function name, should be: hb_stackLocalVariable()
      not hb_stacklocalVariable()
    + added hb_stackId()
    * hide hb_stack declaration when HB_STACK_MACROS is not set

  * harbour/source/vm/dynlibhb.c
    * use hb_stackId()

  * harbour/source/vm/estack.c
    + added hb_stackId()
    ! fixed some condition used to check stack access - they were
      reporting internal errors for valid code

  * harbour/source/vm/hvm.c
    ! fixed code which executed hb_stackLocalVariable() with pointer
      to SHORT not int

best regards,
Przemek
From dbtopas at dbtopas.lt  Tue Dec 12 18:33:56 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Tue Dec 12 18:33:59 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-09
	17:10	UTC+0100 Przemyslaw Czerpak
In-Reply-To: <20061212152427.GA17226@localhost.localdomain>
References: <457BC6F6.E4B@synel.co.il>
	<20061212152427.GA17226@localhost.localdomain>
Message-ID: <457F3C64.9030600@dbtopas.lt>

Hello,

Przemyslaw Czerpak wrote:
> Chen it may not be only CG problem. It's quite common bug in many
> C compilers which can appear in optimization process. Instead of
> copping bytes they make ulSize >>= 2 and copy 32bit integers. Then
> the rest as bytes. Usually C compilers generate code to read the rest
> also as 32bit integer and only store read data using byte memory access.

This optimization is used also by borland, but there is no bug reading 
rest of bytes. The code is following:
	mov	edx,ecx
	shr	ecx,1
	shr	ecx,1
	cld
	repz	movsd
	mov	ecx,edx
	and	ecx,+003h
	repz	movsb

I do not know how CG is working. Perhaps it is virtual machine that 
emulates CPU instructions and checks all possible memory access erorrs.
But CPU level instruction
     repz movsd
does not try to read 32bit integer if ecx is zero (that's the case we 
have). Otherwise, code
     memcpy(NULL, NULL, 0)
would GPF, but it doesn't.
I thing it's bug of CG, perhaps it checks if 32bit of data is available 
on repz movsb instruction even if ecx is zero.


Best regards,
Mindaugas
From druzus at priv.onet.pl  Tue Dec 12 22:19:50 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 12 22:20:41 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-09
	17:10	UTC+0100 Przemyslaw Czerpak
In-Reply-To: <457F3C64.9030600@dbtopas.lt>
References: <457BC6F6.E4B@synel.co.il>
	<20061212152427.GA17226@localhost.localdomain>
	<457F3C64.9030600@dbtopas.lt>
Message-ID: <20061213031950.GA19064@localhost.localdomain>

On Wed, 13 Dec 2006, Mindaugas Kavaliauskas wrote:
> This optimization is used also by borland, but there is no bug reading 
> rest of bytes. The code is following:
> 	mov	edx,ecx
> 	shr	ecx,1
> 	shr	ecx,1
> 	cld
> 	repz	movsd
> 	mov	ecx,edx
> 	and	ecx,+003h
> 	repz	movsb

memcpy is also very often automatically inlined by C compiler.
The above does not seems to be highly optimized assembler code
or inlined memcpy version. It will be enough if in final binaries
in some context will be worth for some reasons to copy the string
to stack. Because in this case the maximum string size is known
and is not greater then 4 then in final binaries the following
code can appear:
	pushd	[string]

It's perfectly valid but will activate CG because you are reading
4 bytes when string has only 3 and IMHO sth like that happens in
this case.

> I do not know how CG is working. Perhaps it is virtual machine that 
> emulates CPU instructions and checks all possible memory access erorrs.

In such way works valgrind and it can analyze any binaries.
CG seems to be integrated with C compiler and needs some special
code to be generated. But I only guess. AFAIR we have some BCC5
full version in my firm. It was bought few years ago and no one
uses it. If it's still there and I will have some spare time then
I'll try to install it and check how CG works and what assembler
code is generated in this particular case.

> But CPU level instruction
>     repz movsd
> does not try to read 32bit integer if ecx is zero (that's the case we 
> have). Otherwise, code
>     memcpy(NULL, NULL, 0)
> would GPF, but it doesn't.

Yes of course and the above code will not cause such effect.
But I'm not sure it's the same code as the one generated for console.c

> I thing it's bug of CG, perhaps it checks if 32bit of data is available 
> on repz movsb instruction even if ecx is zero.

Possible but in such case we should have much more of similar bug reports.
IMHO it's sth else, f.e. sth like pushd above in generated code or in some
additional protection code use only in CG binaries.

best regards,
Przemek
From dbtopas at dbtopas.lt  Wed Dec 13 07:50:36 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Wed Dec 13 07:55:34 2006
Subject: [Harbour] CodeGuard tests after changelog
	2006-12-09	17:10	UTC+0100 Przemyslaw Czerpak
In-Reply-To: <20061213031950.GA19064@localhost.localdomain>
References: <457BC6F6.E4B@synel.co.il>	<20061212152427.GA17226@localhost.localdomain>	<457F3C64.9030600@dbtopas.lt>
	<20061213031950.GA19064@localhost.localdomain>
Message-ID: <457FF71C.9030200@dbtopas.lt>

Przemyslaw Czerpak wrote:
>>This optimization is used also by borland, but there is no bug reading 
>>rest of bytes. The code is following:
>>	mov	edx,ecx
>>	shr	ecx,1
>>	shr	ecx,1
>>	cld
>>	repz	movsd
>>	mov	ecx,edx
>>	and	ecx,+003h
>>	repz	movsb

> memcpy is also very often automatically inlined by C compiler.
>...
> But I'm not sure it's the same code as the one generated for console.c

In this case, memcpy is not inlined by compiler. To be sure, I've
reverse engineered harbour\obj\b32\console.obj

console.c line 400:
     memcpy( &buf[ iPtr ], s_szCrLf, s_iCrLfLen );
     iPtr += s_iCrLfLen;

is compiled to:
	mov	ecx,$S9              ; $S9 is s_iCrLfLen
	lea	eax,[ebp-00000104h]  ; ebp-104h is buf
	push	ecx
	add	eax,ebx              ; ebx is register optimized iPtr
	push	offset _DATA:$S6     ; $S6 is s_szCrLf
	push	eax
	call	_memcpy
	add	esp,+00Ch
	add	ebx,$S9              ; iPtr += s_iCrLfLen

To be sure, that call _memcpy is not optimized by some linker trick, 
I've reverse engineered the final executable instead of memcpy module 
from borland library. And the code was presented in my previous letter.

>>I do not know how CG is working. Perhaps it is virtual machine that 
>>emulates CPU instructions and checks all possible memory access erorrs.
> 
> In such way works valgrind and it can analyze any binaries.
> CG seems to be integrated with C compiler and needs some special
> code to be generated.

The generated code seems to be perfectly valid. So, the bug could be in 
CG itself or in some special libraries with CG version of memcpy. I do 
not have CG to test it.


Best regards,
Mindaugas

From niki at synel.co.il  Wed Dec 13 09:20:10 2006
From: niki at synel.co.il (Chen Kedem)
Date: Wed Dec 13 09:55:41 2006
Subject: [Harbour] Re: CodeGuard tests after changelog 2006-12-09 17:10
	UTC+0100 Przemyslaw Czerpak
References: <457BC6F6.E4B@synel.co.il>
Message-ID: <45800C1A.706E@synel.co.il>

I made the following changes on source/rtl/console.c v1.207
and it is working fine with BCC32 with and without CodeGuard.

Here is the diff, I didn't want to break anything for other
environments:


===Diff File===
--- console.c   Sun Dec 08 05:03:55 2006
+++ h:console.c Wed Dec 13 16:05:08 2006
@@ -77,14 +77,30 @@
 #include "hbset.h"
 #include "hb_io.h"

-/* length of buffer for CR/LF characters */
-#define CRLF_BUFFER_LEN   OS_EOL_LEN + 1
-
 static BOOL    s_bInit = FALSE;
 static USHORT  s_uiPRow;
 static USHORT  s_uiPCol;
-static char    s_szCrLf[ CRLF_BUFFER_LEN ] = { HB_CHAR_LF, 0 };
-static int     s_iCrLfLen = 1;
+
+/* NOTE: Some C compilers like BCC32 optimize the call of small static buffers
+ *       into an integer to read it faster. Later, programs like CodeGuard
+ *       complain if the given buffer was smaller than an int. [ckedem]
+*/
+
+/* length of buffer for CR/LF characters */
+#if !defined(OS_EOL_LEN) || OS_EOL_LEN < sizeof(int)
+#  define CRLF_BUFFER_LEN   sizeof(int)  /* To make CodeGuard happy */
+#else
+#  define CRLF_BUFFER_LEN   OS_EOL_LEN + 1
+#endif
+
+#if defined(OS_UNIX_COMPATIBLE) && !defined(HB_EOL_CRLF)
+   static const char s_szCrLf[ CRLF_BUFFER_LEN ] = { HB_CHAR_LF, 0 };
+   static const int  s_iCrLfLen = 1;
+#else
+   static const char s_szCrLf[ CRLF_BUFFER_LEN ] = { HB_CHAR_CR, HB_CHAR_LF, 0 };
+   static const int  s_iCrLfLen = 2;
+#endif
+
 static FHANDLE s_hFilenoStdin  = 0;
 static FHANDLE s_hFilenoStdout = 1;
 static FHANDLE s_hFilenoStderr = 2;
@@ -115,17 +131,6 @@
       else if( hStderr > 0 ) /* //STDERR:x */
          s_hFilenoStderr = hStderr;
    }
-#endif
-
-#if defined(OS_UNIX_COMPATIBLE) && !defined(HB_EOL_CRLF)
-   s_szCrLf[ 0 ] = HB_CHAR_LF;
-   s_szCrLf[ 1 ] = '\0';
-   s_iCrLfLen = 1;
-#else
-   s_szCrLf[ 0 ] = HB_CHAR_CR;
-   s_szCrLf[ 1 ] = HB_CHAR_LF;
-   s_szCrLf[ 2 ] = '\0';
-   s_iCrLfLen = 2;
 #endif

    /*
===============

  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From druzus at priv.onet.pl  Wed Dec 13 12:46:45 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 13 12:47:36 2006
Subject: [Harbour] ChangeLog 2006-12-13 18:45 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061213174645.GA5875@localhost.localdomain>

2006-12-13 18:45 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/source/rtl/console.c
    * pacify false CG error messages - Chen Kedem modifications (sizeof(int)
      in #if replaced by hardcoded 4 for compilers which does not allow to
      use sizeof() in #if directives)

  * harbour/TODO
    - removed console.c cleanup note from TOFIX

  * harbour/include/hbcomp.h
  * harbour/include/hbexprb.c
  * harbour/include/hbexprc.c
  * harbour/source/common/expropt1.c
    * minor code cleanup

best regards,
Przemek
From randy at palmasdev.com  Tue Dec 12 13:13:03 2006
From: randy at palmasdev.com (Randy Portnoff)
Date: Wed Dec 13 13:53:05 2006
Subject: [Harbour] ChangeLog 2006-12-11 22:15 UTC+0100 Przemyslaw
	Czerpak (druzus/at/priv.onet.pl)
In-Reply-To: <20061212152521.GA17268@localhost.localdomain>
Message-ID: <5.2.0.9.0.20061212131200.021b0698@pop3.pathcom.com>

Thank you Przemek - Much appreciated!

Yes, you are correct - This is a simpler (and proper!) fix based on 
existing Cl*pper 5.2e functionality which only removes a single trailing 
space (not multiple spaces as my original implementation did).

At 04:25 PM 12/12/2006 +0100, you wrote:
>2006-12-11 22:15 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
>   * harbour/source/rtl/memoline.c
>     ! added fix sent to me by Randy Portnoff - it's a little bit differ
>       then the one Randy sent to list but this one seems to be correct.
>       I never used this function in Clipper and made only very basic
>       tests. I believe that Randy make better tests and this fix will
>       not break some other constructions.
>
>best regards,
>Przemek
>_______________________________________________
>Harbour mailing list
>Harbour@harbour-project.org
>http://lists.harbour-project.org/mailman/listinfo/harbour

From antonioharbour at gmail.com  Thu Dec 14 04:34:47 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Thu Dec 14 04:35:01 2006
Subject: [Harbour] Harbour on Pocket PC and bussiness graphics
Message-ID: <45811ac1.4309392b.0b96.ffffff77@mx.google.com>

Harbour running on Pocket PC and using FWPPC own Class TGraph for bussiness
graphics: 

http://img220.imageshack.us/img220/8868/fwppcgb0.png

regards,

Antonio Linares
www.fivetechsoft.com

From niki at synel.co.il  Thu Dec 14 04:48:34 2006
From: niki at synel.co.il (Chen Kedem)
Date: Thu Dec 14 04:46:55 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-13 18:45 UTC+0100
	Przemyslaw Czerpak
Message-ID: <45811DF2.4199@synel.co.il>

Przemek,

-- 1 --

Thanks for updating console.c there is one more place to change:

source/rtl/console.c line#398
memcpy( &buf[ iPtr ], "\x0C\x0D", 2 );

probably should be (as I get the same type of CG error here):
memcpy( &buf[ iPtr ], "\x0C\x0D\x00\x00", 2 );

-- 2 --

This one took me a while to reduce:

--z2.prg--
PROC Test
LOCAL cFile
cFile := left("AAAAAAAB", 8 )
? StrTran( cFile, "AAAAAAA", NIL )
----------

bld_b32 z2 /w/a/n
z2

Gives the following CG error at runtime:
(it is working if the replace string is less than 7)

Warning 00001. 0x130410 (Thread 0x0090):
Access overrun: Attempt to access 7 byte(s) at 0x00CB8253, that is at offset
 95 in heap block 0x00CB81F4 which is only 101 bytes long.
memcmp(0x00CB8253, 0x004CE4F8, 0x7 [7]) 

Call Tree:
   0x0045C38F(=z2.exe:0x01:05B38F) source\rtl\STRTRAN.C#128
   0x00426246(=z2.exe:0x01:025246) source\vm\HVM.C#4159
   0x0041B80D(=z2.exe:0x01:01A80D) source\vm\HVM.C#939
   0x004011BC(=z2.exe:0x01:0001BC) z2.c#46
   0x00426246(=z2.exe:0x01:025246) source\vm\HVM.C#4159
   0x0041AC12(=z2.exe:0x01:019C12) source\vm\HVM.C#523

The memory block (0x00CB81F4) [size: 101 bytes] was allocated with malloc
Call Tree:
   0x0041813B(=z2.exe:0x01:01713B) source\vm\FM.C#234
   0x00432FC8(=z2.exe:0x01:031FC8) source\vm\ITEMAPI.C#291
   0x0041699C(=z2.exe:0x01:01599C) source\vm\EXTEND.C#715
   0x0045463E(=z2.exe:0x01:05363E) source\rtl\LEFT.C#72
   0x00426246(=z2.exe:0x01:025246) source\vm\HVM.C#4159
   0x0041B80D(=z2.exe:0x01:01A80D) source\vm\HVM.C#939

-- 3 --

The following program runs fine as a standalone,
but fail if run using HBRun

--z1.prg--
PROC Main
SELE 2
USE test      // the standard Tests/test.dbf
? B->FIRST
----------

..\bin\harbour z1 /w/a/n/gh
..\bin\hbrun z1

And here is the hbrun.cgl:

Error 00001. 0x100600 (Thread 0x005F):
Access in invalid memory: Attempt to access 2 byte(s) at 0x00000000+8.
Call Tree:
   0x00431461(=hbrun.exe:0x01:030461) source\vm\DYNSYM.C#376
   0x00497CD7(=hbrun.exe:0x01:096CD7) source\rdd\DBCMD.C#978
   0x0044503F(=hbrun.exe:0x01:04403F) source\vm\HVM.C#3999
   0x00447CFE(=hbrun.exe:0x01:046CFE) source\vm\HVM.C#4971
   0x0043BDCE(=hbrun.exe:0x01:03ADCE) source\vm\HVM.C#1382
   0x004455C1(=hbrun.exe:0x01:0445C1) source\vm\HVM.C#4156

------------------------------------------
Error 00002. 0x400000 (r) (Thread 0x005F):
Exception 0xC0000005: Access violation at 0x8.
Call Tree:
   0x00431461(=hbrun.exe:0x01:030461) source\vm\DYNSYM.C#376
   0x00497CD7(=hbrun.exe:0x01:096CD7) source\rdd\DBCMD.C#978
   0x0044503F(=hbrun.exe:0x01:04403F) source\vm\HVM.C#3999
   0x00447CFE(=hbrun.exe:0x01:046CFE) source\vm\HVM.C#4971
   0x0043BDCE(=hbrun.exe:0x01:03ADCE) source\vm\HVM.C#1382
   0x004455C1(=hbrun.exe:0x01:0445C1) source\vm\HVM.C#4156

-------

  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From druzus at priv.onet.pl  Thu Dec 14 10:31:45 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Thu Dec 14 10:32:34 2006
Subject: [Harbour] CodeGuard tests after changelog 2006-12-13 18:45
	UTC+0100 Przemyslaw Czerpak
In-Reply-To: <45811DF2.4199@synel.co.il>
References: <45811DF2.4199@synel.co.il>
Message-ID: <20061214153145.GB19690@localhost.localdomain>

On Thu, 14 Dec 2006, Chen Kedem wrote:
> -- 1 --
> Thanks for updating console.c there is one more place to change:
> source/rtl/console.c line#398
> memcpy( &buf[ iPtr ], "\x0C\x0D", 2 );
> probably should be (as I get the same type of CG error here):
> memcpy( &buf[ iPtr ], "\x0C\x0D\x00\x00", 2 );

I'll change it in next commit.

> -- 2 --
> This one took me a while to reduce:
> --z2.prg--
> PROC Test
> LOCAL cFile
> cFile := left("AAAAAAAB", 8 )
> ? StrTran( cFile, "AAAAAAA", NIL )
> ----------
> bld_b32 z2 /w/a/n
> z2
> Gives the following CG error at runtime:
> (it is working if the replace string is less than 7)
> Warning 00001. 0x130410 (Thread 0x0090):
> Access overrun: Attempt to access 7 byte(s) at 0x00CB8253, that is at offset
>  95 in heap block 0x00CB81F4 which is only 101 bytes long.
> memcmp(0x00CB8253, 0x004CE4F8, 0x7 [7]) 

It's similar problem to the one in console.c though here it can be quite
easy fixed and some things in STRTRAN() optimized. Just like in LEFT()
and RIGHT().
I'll do that.

> -- 3 --
> The following program runs fine as a standalone,
> but fail if run using HBRun
> --z1.prg--
> PROC Main
> SELE 2
> USE test      // the standard Tests/test.dbf
> ? B->FIRST
> ----------
> ..\bin\harbour z1 /w/a/n/gh
> ..\bin\hbrun z1
> And here is the hbrun.cgl:
> Error 00001. 0x100600 (Thread 0x005F):
> Access in invalid memory: Attempt to access 2 byte(s) at 0x00000000+8.
> Call Tree:
>    0x00431461(=hbrun.exe:0x01:030461) source\vm\DYNSYM.C#376
>    0x00497CD7(=hbrun.exe:0x01:096CD7) source\rdd\DBCMD.C#978
>    0x0044503F(=hbrun.exe:0x01:04403F) source\vm\HVM.C#3999
>    0x00447CFE(=hbrun.exe:0x01:046CFE) source\vm\HVM.C#4971
>    0x0043BDCE(=hbrun.exe:0x01:03ADCE) source\vm\HVM.C#1382
>    0x004455C1(=hbrun.exe:0x01:0445C1) source\vm\HVM.C#4156

Ups. I removed arbitrary setting setting HB_FS_PUBLIC for all non static
symbols and I forgot to update hb_vmRegisterSymbols()
I'll fix it two - many thanks for information.

best regards,
Przemek
From esgici at gmail.com  Fri Dec 15 00:03:45 2006
From: esgici at gmail.com (Bicahi Esgici)
Date: Fri Dec 15 00:03:50 2006
Subject: [Harbour] Adding CP and Lang to Harbour
Message-ID: <d4ce00e70612142103oe42e674x394c6e3be6c7e517@mail.gmail.com>

Hi to all

 I am not a developper, only end user of Harbour

 I want some additions to Harbour language and codepage features.

 I made some translation from templates and other source codes, but
I'm not sure that everyting is ok, since I have no perfect C
knowledge.

 Also I don't know it is corect way sending zipped file(s) to this list.

 If my files has any bug please warn me.

Best regards

-- 
esgici
-------------- next part --------------
A non-text attachment was scrubbed...
Name: cp&msgtr.zip
Type: application/zip
Size: 9706 bytes
Desc: not available
Url : http://lists.harbour-project.org/pipermail/harbour/attachments/20061215/d0132de8/cpmsgtr.zip
From druzus at priv.onet.pl  Fri Dec 15 11:25:40 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec 15 11:26:30 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061215162540.GA6215@localhost.localdomain>

2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbapi.h
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hbdefs.h
  * harbour/include/hberrors.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/include/hbexprc.c
  * harbour/include/hbpcode.h
  * harbour/include/hbxvm.h
  * harbour/source/common/expropt1.c
  * harbour/source/common/expropt2.c
  * harbour/source/common/hbstr.c
  * harbour/source/compiler/cmdcheck.c
  * harbour/source/compiler/genc.c
  * harbour/source/compiler/gencc.c
  * harbour/source/compiler/gencobj.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbdead.c
  * harbour/source/compiler/hbfix.c
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/compiler/hblbl.c
  * harbour/source/compiler/hbpcode.c
  * harbour/source/compiler/hbstripl.c
  * harbour/source/macro/macro.y
  * harbour/source/macro/macro.yyc
  * harbour/source/rtl/console.c
  * harbour/source/rtl/isprint.c
  * harbour/source/rtl/left.c
  * harbour/source/rtl/right.c
  * harbour/source/rtl/strtran.c
  * harbour/source/vm/codebloc.c
  * harbour/source/vm/hvm.c
  * harbour/source/vm/macro.c
    * general PCODE cleanup and address most of TODO/TOFIX notes in
      source code:
      ! fixed GPF traps when too long string or codeblock is generatd
      + added support for 16MB codeblocks and strings
      ! removed macrocompiler limitation for jumps range
      ! fixed GPF when more then 255 local variables is used and added
        support for 2^15 locals
      ! removed all strtok() functions
      + added missing HB_P_<op>EQ[POP] PCODEs
      % added optimization for all +=, -=, *=, %=, ^=, **= operations
        when left side of expression is variable or array item
      % added optimization for all +=, -=, *=, %=, ^=, **= operations
        when left side of expression is object method and updated ++, --
        for new code. It's still disabled until we will not add support
        for late evaluated reference items to HVM
      ! fixed a[++i]++ and similar operations (a[++i]*=2, ...). Now ++i is
        executed only once. It's not Clipper compatible but it was in
        TODO note in source code. It can be disabled by -kc option
      * finished support to xHarbour like #pragma TEXTHIDDEN(1)
      ! fixed local add int optimization when PARAMETERS used after
        optimization changed local variable number over 255
      ! fixed GPF trap when in HB_P_<op>EQ PCODEs when executed for
        direct values
      * others
    ! fixed problems reported by Chen
    * optimized strtran(), left(), right() to not create new string copy
      when the same value is returned

New PCODEs added and changed the behavior of some old one. You have to
rebuild whole source code. I'm thinking about reordering the PCODE list
so I haven't change the PCODE number yet.
Ryszard I changed HB_P_<op>EQ[POP] PCODEs behavior. Now only the first
argument is passed by reference and they are used to optimize any expressions
The maximum size of codeblock and static string is now 16MB. The macro
compiler now can support any code which will not have internal jumps longer
then 8MB (this is maximal jump size supported by us) and strings longer then
16MB. If you want to convert macro to codeblock then the maximum size of
compiled PCODE is 16MB. Exceeding any of these limitations now should not 
cause GPF but simple RT or compiler error.
The speed of += operation for strings has been hardly increased, in some
code even hundreds or thousands times and the optimizations works also for
-gc2 (before some optimizations existed only in -gc3).
I'm not sure if I should update PCODE list to reorder existing PCODEs
in some more cleaner way. IMHO it will be good to make it before 1.0
to not change it later. This is the last thing I plan to change (if)
and I would like to finish any farther modifications. Maybe if I'll find
some spare time I'll add yet support for late evaluated references so we
will be able to enable ++, --, +=, -=, *=, %=, ^=, **= also for object
methods. The open things which are still active and can be important for
version 1.0 are:
1. cleaning compiler error messages to use common errors for PP and compiler
   It's sth what I can do.
2. debugger with C interface - I do not know if Ryszard plan to work on it
   in the nearest future.
3. add support for some compiler optimizations to macro compiler too, f.e.
   the above ones are quite important. Ryszard, any chance that you can
   make it before 1.0?
4. cleaning compiler and macro compiler function names so they can be used
   in one binary.

Any of the above is not critical and 1.0 can be released without them.
I do not know if Ryszard plans to commit some modifications yet. If not
then for me we can start release process.

best regards,
Przemek
From druzus at priv.onet.pl  Fri Dec 15 16:09:04 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec 15 16:09:52 2006
Subject: [Harbour] Adding CP and Lang to Harbour
In-Reply-To: <d4ce00e70612142103oe42e674x394c6e3be6c7e517@mail.gmail.com>
References: <d4ce00e70612142103oe42e674x394c6e3be6c7e517@mail.gmail.com>
Message-ID: <20061215210904.GA26820@localhost.localdomain>

On Fri, 15 Dec 2006, Bicahi Esgici wrote:
> Hi to all
> I am not a developper, only end user of Harbour
> I want some additions to Harbour language and codepage features.
> I made some translation from templates and other source codes, but
> I'm not sure that everyting is ok, since I have no perfect C
> knowledge.
> Also I don't know it is corect way sending zipped file(s) to this list.
> If my files has any bug please warn me.

Do you also have unicode tables for CP857 (uc857.c)?
They are necessary for TRDOS.

best regards,
Przemek
From dbtopas at dbtopas.lt  Fri Dec 15 20:49:06 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Fri Dec 15 20:49:00 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061215162540.GA6215@localhost.localdomain>
References: <20061215162540.GA6215@localhost.localdomain>
Message-ID: <45835092.1020106@dbtopas.lt>

Hello,

>       % added optimization for all +=, -=, *=, %=, ^=, **= operations
>         when left side of expression is variable or array item
>       % added optimization for all +=, -=, *=, %=, ^=, **= operations
>         when left side of expression is object method and updated ++, --
>         for new code. It's still disabled until we will not add support
>         for late evaluated reference items to HVM
>       ! fixed a[++i]++ and similar operations (a[++i]*=2, ...). Now ++i is
>         executed only once. It's not Clipper compatible but it was in
>         TODO note in source code. It can be disabled by -kc option

Can we solve problem of HB_P_PUSHOVARREF this way?

Expression:  a[ b++ ]:c += 10
Current PCODE:
	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_MESSAGE, 6, 0,	/* C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_SENDSHORT, 0,
	HB_P_PUSHBYTE, 10,	/* 10 */
	HB_P_PLUS,
	HB_P_SENDSHORT, 1,
	HB_P_POP,

I suggest:
	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_MESSAGE, 6, 0,	/* C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_DUPLICATE,
	HB_P_SENDSHORT, 0,
	HB_P_PUSHBYTE, 10,	/* 10 */
	HB_P_PLUS,
	HB_P_SENDSHORT, 1,
	HB_P_POP,


In function hb_compExprSendPopPush instead of two sentences:
   HB_EXPR_USE( pObj->value.asMessage.pObject, HB_EA_PUSH_PCODE ),
we can use it only once and generate HB_P_DUPLICATE PCODE.


Best regards,
Mindaugas


P.S. one more topic related to hb_compExprSendPopPush() and
   HB_EXPR_USE( pObj->value.asMessage.pMessage, HB_EA_PUSH_PCODE )
in general. I expect different result in this code:

PROC main()
LOCAL a, b
    a := C():New()
    b := "Val"
    a:&b := 1
    ? a:Val   // Prints: 0, not 1  !!!!
RETURN

CLASS C
    DATA Val INIT 0
ENDCLASS

From druzus at priv.onet.pl  Fri Dec 15 23:17:08 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec 15 23:18:03 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <45835092.1020106@dbtopas.lt>
References: <20061215162540.GA6215@localhost.localdomain>
	<45835092.1020106@dbtopas.lt>
Message-ID: <20061216041708.GA15687@localhost.localdomain>

On Sat, 16 Dec 2006, Mindaugas Kavaliauskas wrote:
> >      % added optimization for all +=, -=, *=, %=, ^=, **= operations
> >        when left side of expression is variable or array item
> >      % added optimization for all +=, -=, *=, %=, ^=, **= operations
> >        when left side of expression is object method and updated ++, --
> >        for new code. It's still disabled until we will not add support
> >        for late evaluated reference items to HVM
> >      ! fixed a[++i]++ and similar operations (a[++i]*=2, ...). Now ++i is
> >        executed only once. It's not Clipper compatible but it was in
> >        TODO note in source code. It can be disabled by -kc option
> Can we solve problem of HB_P_PUSHOVARREF this way?
> Expression:  a[ b++ ]:c += 10
> Current PCODE:
> 	HB_P_MESSAGE, 5, 0,	/* _C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_MESSAGE, 6, 0,	/* C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_SENDSHORT, 0,
> 	HB_P_PUSHBYTE, 10,	/* 10 */
> 	HB_P_PLUS,
> 	HB_P_SENDSHORT, 1,
> 	HB_P_POP,
> I suggest:
> 	HB_P_MESSAGE, 5, 0,	/* _C */
> 	HB_P_MESSAGE, 6, 0,	/* C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_DUPLICATE,
> 	HB_P_SENDSHORT, 0,
> 	HB_P_PUSHBYTE, 10,	/* 10 */
> 	HB_P_PLUS,
> 	HB_P_SENDSHORT, 1,
> 	HB_P_POP,

Very nice optimization and many thanks for your help.
If you compile Harbour with HB_USE_OBJMSG_REF then generated PCODE
will be evaen simpler:

	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_PUSHOVARREF,
	HB_P_PUSHBYTE, 10,	/* 10 */
	HB_P_PLUSEQPOP,

and the massage is called only once but it works only for real
object variables not for variables emulated with SETGET methods
which needs to method calls.
It's not exactly HB_P_PUSHOVARREF problem. The real problem is
caused by the fact that we cannot recognize at compile time
type of object messages. This can be done only at runtime (of
course we can also add support for compile time prototyping and
optimizations based on them but this is differ subject which will
need much more serious compiler modifications - I think we can
talk about it when we will have working strong typing) so we
need a new item type which will be extended reference which can
activate some additional code on access/assign operation. Current
HVM is ready for reentrant access so it should nicely work. We
only have to modify all code which uses hb_itemUnRef() now and
divide it to unreference for reading and writing. Not very hard
but in few cases it will need a little bit more complex modifications
when hb_itemUnRef() is used in places where we cannot guess the
final usage or it's used for both cases. This can be the source
of some mistakes during modification so probably now it's not the
good moment to introduce it and I also was looking for some methods of
current code optimizations. The worst is post(inc/dec)rementation, f.e.
    ? o:c++
For this (or to keep your example: ? a[ b++ ]:c++ we have now three
message calls and it cannot be resolved by modification as you suggested
(BTW very nice and I think it's worth to implement for pre and statement
(inc/dec)rementation even if we plan to add support for late references)
because we do not have any PCODE to swap items on HVM stack.
I can add such pcode, f.e. HB_P_SWAP <n> which will swap the top item
with the <n>+1 one counting from the top but when we will have working
late references then it will not be longer necessary though maybe someone
will wind it usable in some other constructions. I do not want to take such
decision myself - all my recent modifications was necessary for some code
without working alternatives but here also other developers should take a
decision. If others agree then I can make it probably in this weekend.

> In function hb_compExprSendPopPush instead of two sentences:
>   HB_EXPR_USE( pObj->value.asMessage.pObject, HB_EA_PUSH_PCODE ),
> we can use it only once and generate HB_P_DUPLICATE PCODE.
> 
> 
> Best regards,
> Mindaugas

> P.S. one more topic related to hb_compExprSendPopPush() and
>   HB_EXPR_USE( pObj->value.asMessage.pMessage, HB_EA_PUSH_PCODE )
> in general. I expect different result in this code:
> PROC main()
> LOCAL a, b
>    a := C():New()
>    b := "Val"
>    a:&b := 1
>    ? a:Val   // Prints: 0, not 1  !!!!
> RETURN
> 
> CLASS C
>    DATA Val INIT 0
> ENDCLASS

It works when b:="_Val" and this is intentional. To make your code working
as you expect we will have to add new PCODE here or we will inherit xHarbour
bug which causes that scoping does not work properly for macro methods and
you can write to READONLY members using it.

Best regards,
Przemek
From fisse at us.ibm.com  Sat Dec 16 00:40:17 2006
From: fisse at us.ibm.com (Oliver S Fisse)
Date: Sat Dec 16 00:40:55 2006
Subject: [Harbour] Oliver S Fisse is out of the office.
Message-ID: <OF343B9276.CA10D28A-ON87257246.001F2770-87257246.001F2770@us.ibm.com>


I will be out of the office starting  12/15/2006 and will not return until
12/28/2006.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061215/c6ae67a0/attachment.html
From druzus at priv.onet.pl  Sat Dec 16 07:28:54 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 16 07:29:42 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <45835092.1020106@dbtopas.lt>
References: <20061215162540.GA6215@localhost.localdomain>
	<45835092.1020106@dbtopas.lt>
Message-ID: <20061216122854.GA18929@localhost.localdomain>

On Sat, 16 Dec 2006, Mindaugas Kavaliauskas wrote:
> I suggest:
> 	HB_P_MESSAGE, 5, 0,	/* _C */
> 	HB_P_MESSAGE, 6, 0,	/* C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_DUPLICATE,
> 	HB_P_SENDSHORT, 0,
> 	HB_P_PUSHBYTE, 10,	/* 10 */
> 	HB_P_PLUS,
> 	HB_P_SENDSHORT, 1,
> 	HB_P_POP,

I've just look carefully at this code and it also cannot be implemented
without HB_P_SWAP PCODE (it was really late when I was answering and
I had to be tired - I should notice it at once). The working code will
look like:

	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_DUPLICATE,
	HB_P_MESSAGE, 6, 0,	/* C */
	HB_P_SWAP, 0,
	HB_P_SENDSHORT, 0,
	HB_P_PUSHBYTE, 10,	/* 10 */
	HB_P_PLUS,
	HB_P_SENDSHORT, 1,
	HB_P_POP,


best regards,
Przemek
From dbtopas at dbtopas.lt  Sat Dec 16 11:01:10 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Sat Dec 16 11:01:31 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061216041708.GA15687@localhost.localdomain>
References: <20061215162540.GA6215@localhost.localdomain>
	<45835092.1020106@dbtopas.lt>
	<20061216041708.GA15687@localhost.localdomain>
Message-ID: <45841846.4060906@dbtopas.lt>

Hello,


>>I suggest:
>>	HB_P_MESSAGE, 5, 0,	/* _C */
>>	HB_P_MESSAGE, 6, 0,	/* C */
>>	HB_P_PUSHLOCALNEAR, 2,	/* A */
>>	HB_P_PUSHLOCALNEAR, 3,	/* B */
>>	HB_P_DUPLICATE,
>>	HB_P_INC,
>>	HB_P_POPLOCALNEAR, 3,	/* B */
>>	HB_P_ARRAYPUSH,
>>	HB_P_DUPLICATE,
>>	HB_P_SENDSHORT, 0,
>>	HB_P_PUSHBYTE, 10,	/* 10 */
>>	HB_P_PLUS,
>>	HB_P_SENDSHORT, 1,
>>	HB_P_POP,
> 
> I've just look carefully at this code and it also cannot be implemented
> without HB_P_SWAP PCODE (it was really late when I was answering and
> I had to be tired - I should notice it at once). The working code will
> look like:
> 
> 	HB_P_MESSAGE, 5, 0,	/* _C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_DUPLICATE,
> 	HB_P_MESSAGE, 6, 0,	/* C */
> 	HB_P_SWAP, 0,
> 	HB_P_SENDSHORT, 0,
> 	HB_P_PUSHBYTE, 10,	/* 10 */
> 	HB_P_PLUS,
> 	HB_P_SENDSHORT, 1,
> 	HB_P_POP,

My first idea was exactly like this your code, I've even used the same 
HB_P_SWAP name for it. The only difference, I haven't used parameter for 
swap pcode. But we can use it, making our code a more compatible with 
postscript's "roll" operator.
But later I began to think why we don't have HB_P_SWAP until now... And 
I've understood that, it is possible to avoid swap by reordering stack 
push instructions order. So, I've optimized my idea, I've put 
HB_P_MESSAGE _C before HB_P_MESSAGE C and dropped HB_P_SWAP.


I've tried this modification:
80,82d79
<       /* Push object */
<       HB_EXPR_USE( pObj->value.asMessage.pObject, HB_EA_PUSH_PCODE );
< #ifndef HB_USE_OBJMSG_REF
94c91
< #endif
---
 >       HB_EXPR_PCODE1( hb_compGenPCode1, HB_P_DUPLICATE );

Only this was required for the suggested modification (and similiar 
modification for WITHOBJECT). It generates the code I've proposed, but 
it is possible I've broke some other code this way.


> current code optimizations. The worst is post(inc/dec)rementation, f.e.
>     ? o:c++
> For this (or to keep your example: ? a[ b++ ]:c++ we have now three
> message calls and it cannot be resolved by modification as you suggested

I don't understand the problem. The same modification (diff above) makes
    a[ b++ ]:c++
to be compiled to:
	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_MESSAGE, 6, 0,	/* C */
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_DUPLICATE,
	HB_P_INC,
	HB_P_POPLOCALNEAR, 3,	/* B */
	HB_P_ARRAYPUSH,
	HB_P_DUPLICATE,
	HB_P_SENDSHORT, 0,
	HB_P_INC,
	HB_P_SENDSHORT, 1,
	HB_P_POP,

Or are You talking about some situation, when a[ b++ ]:c is an object 
itself with overloaded ++ operator?


>>PROC main()
>>LOCAL a, b
>>   a := C():New()
>>   b := "Val"
>>   a:&b := 1
>>   ? a:Val   // Prints: 0, not 1  !!!!
>>RETURN
>>
>>CLASS C
>>   DATA Val INIT 0
>>ENDCLASS
> 
> 
> It works when b:="_Val" and this is intentional. To make your code working
> as you expect we will have to add new PCODE here or we will inherit xHarbour
> bug which causes that scoping does not work properly for macro methods and
> you can write to READONLY members using it.

It's OK, if it's intentional. I just thought, that this PCODE should be 
generated:
	HB_P_PUSHSTRSHORT, 2, '_', 0,
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_MACROSYMBOL,
	HB_P_PLUS,
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_ONE,
	HB_P_SENDSHORT, 1,
which is equivalent to b := "_Val".



Best regards,
Mindaugas
From druzus at priv.onet.pl  Sat Dec 16 11:28:17 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 16 11:29:06 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <45841846.4060906@dbtopas.lt>
References: <20061215162540.GA6215@localhost.localdomain>
	<45835092.1020106@dbtopas.lt>
	<20061216041708.GA15687@localhost.localdomain>
	<45841846.4060906@dbtopas.lt>
Message-ID: <20061216162817.GA19239@localhost.localdomain>

On Sat, 16 Dec 2006, Mindaugas Kavaliauskas wrote:
> My first idea was exactly like this your code, I've even used the same 
> HB_P_SWAP name for it. The only difference, I haven't used parameter for 
> swap pcode. But we can use it, making our code a more compatible with 
> postscript's "roll" operator.

The parameter is necessary for post (inc,dec)rementation where the result
cannot be dropped, f.e.: ? a[ b++ ]:c++
This is meta code example:

	HB_P_MESSAGE, 5, 0,	/* _C */
	HB_P_<OBJECT>,
	HB_P_DUPLICATE,
	HB_P_MESSAGE, 2, 0,	/* C */
	HB_P_SWAP, 0
	HB_P_SENDSHORT, 0,      /* <2:msg>, <1:obj>, <0:val> */
	HB_P_DUPLICATE,
	HB_P_SWAP, 2
	HB_P_<OPERATION>,
	HB_P_SENDSHORT, 1,
	HB_P_POP,

> But later I began to think why we don't have HB_P_SWAP until now... And 
> I've understood that, it is possible to avoid swap by reordering stack 
> push instructions order. So, I've optimized my idea, I've put 
> HB_P_MESSAGE _C before HB_P_MESSAGE C and dropped HB_P_SWAP.
> 
> I've tried this modification:
> 80,82d79
> <       /* Push object */
> <       HB_EXPR_USE( pObj->value.asMessage.pObject, HB_EA_PUSH_PCODE );
> < #ifndef HB_USE_OBJMSG_REF
> 94c91
> < #endif
> ---
> >       HB_EXPR_PCODE1( hb_compGenPCode1, HB_P_DUPLICATE );
> 
> Only this was required for the suggested modification (and similiar 
> modification for WITHOBJECT). It generates the code I've proposed, but 
> it is possible I've broke some other code this way.

Yes it generates the code you wanted but this code will not work.

> >current code optimizations. The worst is post(inc/dec)rementation, f.e.
> >    ? o:c++
> >For this (or to keep your example: ? a[ b++ ]:c++ we have now three
> >message calls and it cannot be resolved by modification as you suggested
> I don't understand the problem. The same modification (diff above) makes
>    a[ b++ ]:c++
> to be compiled to:
> 	HB_P_MESSAGE, 5, 0,	/* _C */
> 	HB_P_MESSAGE, 6, 0,	/* C */
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_DUPLICATE,
> 	HB_P_INC,
> 	HB_P_POPLOCALNEAR, 3,	/* B */
> 	HB_P_ARRAYPUSH,
> 	HB_P_DUPLICATE,
> 	HB_P_SENDSHORT, 0,

Here you should have internal error. You are sending a message to
array item and the message in not valid symbol item but also the array
item - HB_P_SENDSHORT, 0, uses the most top two values on HVM stack.

> 	HB_P_INC,
> 	HB_P_SENDSHORT, 1,
> 	HB_P_POP,
> Or are You talking about some situation, when a[ b++ ]:c is an object 
> itself with overloaded ++ operator?

No. You forgot about ?. The code generated for:
    ? a[ b++ ]:c++
is differ then the one for:
    a[ b++ ]:c++

The second version is optimized by compiler because result can be dropped.

> >>PROC main()
> >>LOCAL a, b
> >>  a := C():New()
> >>  b := "Val"
> >>  a:&b := 1
> >>  ? a:Val   // Prints: 0, not 1  !!!!
> >>RETURN
> >>
> >>CLASS C
> >>  DATA Val INIT 0
> >>ENDCLASS
> >
> >It works when b:="_Val" and this is intentional. To make your code working
> >as you expect we will have to add new PCODE here or we will inherit 
> >xHarbour
> >bug which causes that scoping does not work properly for macro methods and
> >you can write to READONLY members using it.
> 
> It's OK, if it's intentional. I just thought, that this PCODE should be 
> generated:
> 	HB_P_PUSHSTRSHORT, 2, '_', 0,
> 	HB_P_PUSHLOCALNEAR, 3,	/* B */
> 	HB_P_MACROSYMBOL,
> 	HB_P_PLUS,
> 	HB_P_PUSHLOCALNEAR, 2,	/* A */
> 	HB_P_ONE,
> 	HB_P_SENDSHORT, 1,
> which is equivalent to b := "_Val".

Rather:
	HB_P_PUSHSTRSHORT, 2, '_', 0,
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_PLUS,
	HB_P_MACROSYMBOL,
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_ONE,
	HB_P_SENDSHORT, 1,

Or with one new PCODE:
	HB_P_PUSHLOCALNEAR, 3,	/* B */
	HB_P_MACROSYMASSIGN,
	HB_P_PUSHLOCALNEAR, 2,	/* A */
	HB_P_ONE,
	HB_P_SENDSHORT, 1,

I'll think about it when we will have final version of non macro code.
Seems to be reasonable to add _ automatically by compiler.

So should I add HB_P_SWAP (maybe I should call it HB_P_ROLL?) or not?
Opinions?

best regards,
Przemek
From dbtopas at dbtopas.lt  Sat Dec 16 13:06:27 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Sat Dec 16 13:07:03 2006
Subject: [Harbour] ChangeLog 2006-12-15 16:55 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061216162817.GA19239@localhost.localdomain>
References: <20061215162540.GA6215@localhost.localdomain>
	<45835092.1020106@dbtopas.lt>
	<20061216041708.GA15687@localhost.localdomain>
	<45841846.4060906@dbtopas.lt>
	<20061216162817.GA19239@localhost.localdomain>
Message-ID: <458435A3.3070105@dbtopas.lt>

Hello,


Przemyslaw Czerpak wrote:
> The parameter is necessary for post (inc,dec)rementation where the result
> cannot be dropped, f.e.: ? a[ b++ ]:c++

Oh, yes. I forgot about leaving result on stack...


> So should I add HB_P_SWAP (maybe I should call it HB_P_ROLL?) or not?
> Opinions?

HB_P_SWAP is more clear for me. Roll makes me think about bit rolling 
inside integer. But both names are OK.

Just a note on postscript's "roll", if someone is not familiar to. It 
has two arguments: how many stack items to roll and how many times to 
roll, i.e.,
   roll, 5, 1
   roll, 5, 1
   roll, 5, 1
is equivalent to
   roll, 5, 3
or to
   roll, 5, -2

But I don't know if we need such extended functionality. If it is enough 
to swap/roll <n> items 1 time, we can implement
   HB_P_SWAP, <n-2>
or if we need to indicate direction, we can interpreted byte <n-2> as 
signed char and sign indicates swap/roll direction:
   HB_P_SWAP, -<n-2>
   HB_P_SWAP, <n-2>
in this case
   HB_P_SWAP, 0
swaps to top items, since direction is not important here. We can repeat 
HB_P_SWAP in rare cases, if swap/roll <m> times will be necessary.


Best regards,
Mindaugas
From saile00 at gmail.com  Sat Dec 16 14:11:01 2006
From: saile00 at gmail.com (=?iso-8859-1?Q?El=EDas_Torres?=)
Date: Sat Dec 16 14:11:12 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <000101c72145$f1406de0$2401a8c0@portatil>

Hello,

 

I am a Harbour user and I am opening foxpro DBFs with currency fields. The
DBF is properly opened, but currency fields are shown as zero. Is this a
Harbour bug ? Could you help me or tell me how to fix it ? thank you.

 

Elias Torres.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061216/cd66657f/attachment.html
From esgici at gmail.com  Sat Dec 16 20:37:58 2006
From: esgici at gmail.com (Bicahi Esgici)
Date: Sat Dec 16 20:38:02 2006
Subject: [Harbour] Adding CP and Lang to Harbour
Message-ID: <d4ce00e70612161737p86bdc70r8e79b10bd2e8709a@mail.gmail.com>

On Fri, 15 Dec Przemyslaw Czerpak wrote:

> Do you also have unicode tables for CP857 (uc857.c)?
> They are necessary for TRDOS.

No, I d'ont. But if you give a little info ( i.e. structure of char
table in ucxxx.c files ), or simply advise a doc source, I can try
building one.

TIA

Best regards

-- 
esgici
From druzus at priv.onet.pl  Sat Dec 16 22:02:26 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 16 22:03:14 2006
Subject: [Harbour] Adding CP and Lang to Harbour
In-Reply-To: <d4ce00e70612161737p86bdc70r8e79b10bd2e8709a@mail.gmail.com>
References: <d4ce00e70612161737p86bdc70r8e79b10bd2e8709a@mail.gmail.com>
Message-ID: <20061217030226.GA22642@localhost.localdomain>

On Sun, 17 Dec 2006, Bicahi Esgici wrote:
> >Do you also have unicode tables for CP857 (uc857.c)?
> >They are necessary for TRDOS.
> No, I d'ont. But if you give a little info ( i.e. structure of char
> table in ucxxx.c files ), or simply advise a doc source, I can try
> building one.

I'll generate this table - I wrote some code to make it automatically
from unicode tables.
But please check what CP is used in Turkish Windows version. I do not
think it's also CP857 you used in cptrwin.c.

Best regards,
Przemek
From esgici at gmail.com  Sun Dec 17 07:57:51 2006
From: esgici at gmail.com (Bicahi Esgici)
Date: Sun Dec 17 07:57:55 2006
Subject: [Harbour] Re: Adding CP and Lang to Harbour
Message-ID: <d4ce00e70612170457r47e9fdcdtfa862a7d28b023b4@mail.gmail.com>

On Sun, 17 Dec 2006, Przemyslaw Czerpak wrote:

> I'll generate this table - I wrote some code to make it automatically
> from unicode tables.

Many thanks for your invaluable supports.

> But please check what CP is used in Turkish Windows version. I do not
> think it's also CP857 you used in cptrwin.c.

As always, you are certainly right.

On your warning, I made some probes, and the result is :

Codepage and character set infos on Turkish :

LCID : 0x041F

ANSI CP : 1254

Mac CP : 10081

OEM Primary CP : 857

OEM Primary CP : 852

EBCDIC CP : 1026

Other CP : 850

Character set : ISO 8859-9 ("Latin 5")


So, CP used in Windows is 1254.

I fixed cp & msg files for win and I resend all of them.

Thank you very much.

Best regards


-- 
esgici
-------------- next part --------------
A non-text attachment was scrubbed...
Name: cp&msgtr_2.zip
Type: application/zip
Size: 9703 bytes
Desc: not available
Url : http://lists.harbour-project.org/pipermail/harbour/attachments/20061217/c3110d00/cpmsgtr_2.zip
From niki at synel.co.il  Mon Dec 18 07:23:04 2006
From: niki at synel.co.il (Chen Kedem)
Date: Mon Dec 18 07:21:15 2006
Subject: [Harbour] ChangeLog: 2006-12-18 14:19 UTC+0200 Chen Kedem
Message-ID: <45868828.6F5F@synel.co.il>

2006-12-18 14:19 UTC+0200 Chen Kedem <niki@actcom.co.il>
  * doc/dirstruc.txt
    + Add a oneliner description for: source/rdd/usrrdd,
      source/rtl/gtgui

  * source/rtl/console.c
    * Pacify false CG error messages in one more place, with a comment.


  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From rglab at przesiew.imid.med.pl  Mon Dec 18 12:36:43 2006
From: rglab at przesiew.imid.med.pl (Ryszard Glab)
Date: Mon Dec 18 12:25:33 2006
Subject: [Harbour] Changelog 2006-12-18 18:20 UTC+0100 Ryszard Glab
Message-ID: <4586DFBB.5843.15217C2@localhost>

2006-12-18 18:20 UTC+0100 Ryszard Glab <rglab//imid.med.pl>
   * include/hbcomp.h
      + added extern BOOL hb_compCheckUnclosedStru( HB_COMP_DECL )
      
   * include/hbcompdf.h
      + added 'int iLastLineErr' to HB_COMP structure
      
   * include/hbpp.h
      + added extern BOOL hb_pp_eof( PHB_PP_STATE )
      
   * source/compiler/harbour.c
   * source/compiler/harbour.y
   * source/compiler/harbour.yyc
   * source/compiler/harbour.yyh
   * source/compiler/hbgenerr.c
      * fixed reporting errors in cases of unclosed delimiters or
      unclosed control structures IF/WHILE/FOR/etc

   * source/pp/ppcore.c
      + added hb_pp_eof() function

Regards, Ryszard
-- 
Ryszard Glab


From druzus at priv.onet.pl  Mon Dec 18 13:34:23 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec 18 13:35:14 2006
Subject: [Harbour] ChangeLog 2006-12-18 19:30 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061218183423.GA17884@localhost.localdomain>

2006-12-18 19:30 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/config/w32/bcc32.cf
    * cleanup
  + harbour/config/w32/xcc.cf
    + added XCC support

  * harbour/contrib/btree/hb_btree.c
    * use hb_vmAtInit()/hb_vmAtExit() instead of INIT/EXIT functions defined
      from C code

  * harbour/contrib/libct/tab.c
    * casting

  * harbour/contrib/odbc/odbc.c
    ! removed #include <malloc.h> - it should not be used with new C
      compilers
      I think that we should replace this library with hbodbc from xHarbour.

  * harbour/contrib/ole/ole2.c
    * updated for XCC

  * harbour/include/hbdefs.h
    * include stdint.h if available

  * harbour/source/compiler/complex.c
    ! fixed yet another stupid mistake in WITHOBJECT token

  * harbour/include/hbpcode.h
  * harbour/include/hbxvm.h
  * harbour/source/compiler/genc.c
  * harbour/source/compiler/gencc.c
  * harbour/source/compiler/hbdead.c
  * harbour/source/compiler/hbfix.c
  * harbour/source/compiler/hblbl.c
  * harbour/source/compiler/hbpcode.c
  * harbour/source/compiler/hbstripl.c
  * harbour/source/vm/hvm.c
    + added HB_P_SWAP <n> PCODE

  * harbour/include/hbcompdf.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/include/hbexprc.c
  * harbour/include/hbexprop.h
    ! fixed GPF during compilation of @:var, @:&var, @o:&var
    + added support for @o:&var and @:var, @:&var inside WITH OBJECT
      statement
    * changed PCODE generated of ++,--,+=,-=,... 
      Now left side expression is evaluated _ONLY_ once and when object
      messages are used it's guarantied that exactly the same object
      variable will be used. It also fixes some problems which exists
      in Clipper. This optimization is enabled by -kh flag (by default)
      and can be disabled with -kc.
    % optimize ald macros in ++,--,+=,-=,... operations
    * add automatically "_" prefix when macro message is used in assignment
      context, f.e.:
         s:="osCode"
         o:=errorNew()
         ? o:&s
         o:&s := 100
         ? ++o:&s
         ? o:&s *= 5

  * harbour/include/hblang.ch
    - removed #xtranslate - this file is included by C code and some C
      compiler do not like unknown directives

  * harbour/utils/hbtest/rt_math.prg
    + added test code for <op>assign and (pre/post)(inc/dec)rementation,
      macro messages and WITH OBJECT

  * harbour/source/compiler/harbour.c
  * harbour/source/rdd/dbf1.c
  * harbour/source/rtl/errorapi.c
  * harbour/source/rtl/hbgtcore.c
  * harbour/source/rtl/gtdos/gtdos.c
  * harbour/source/rtl/gtos2/gtos2.c
  * harbour/source/rtl/gtpca/gtpca.c
  * harbour/source/rtl/gtsln/gtsln.c
  * harbour/source/rtl/gtstd/gtstd.c
  * harbour/source/rtl/gtwin/gtwin.c
    * casting and warning cleanup

  * harbour/utils/Makefile
    + added $(HB_UTILS)

  - harbour/utils/hbpp/hbpp.h
  + harbour/utils/hbpp/hbppdef.h
  * harbour/utils/hbpp/hbpp.c
  * harbour/utils/hbpp/hbppcomp.c
  * harbour/utils/hbpp/hbppcore.c
  * harbour/utils/hbpp/hbpplib.c
  * harbour/utils/hbpp/hbpptbl.c
  * harbour/utils/hbpp/pragma.c
    * renamed hbpp.h to hbppdef.h to avoid possible conflict with hbpp.h
      in include directory
    * casting and warning cleanup

best regards,
Przemek
From druzus at priv.onet.pl  Mon Dec 18 18:32:02 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec 18 18:32:51 2006
Subject: [Harbour] object messages in ++, --, <op>= operations
Message-ID: <20061218233202.GA16561@localhost.localdomain>

Hi All,

When object messages are used in ++,--,+=,-=,*=,... operations
then Clipper accepts them only when used with (), f.e.:
    o:var++;
and
    o:var += 10
can be compiled but
    o:var()++;
and
    o:var() += 10
causes syntax errors and for me it's reasonable behavior.
[x]Harbour accept code like
    o:var()++
or
    o:var() += 10

and this can confuse users. I do not like it but I can live with it.
The worser thing is that [x]Harbour also accept
    o:var(1,2,3)++
or
    o:var(1,2,3) += 10

and here passed parameters are dropped in some cases, in some other
used and in assignment context replaced by assigned value.
This is for sure bug for me and we should refuse compilation of such code.
The question is what should I block.
Refuse compilation of
    o:var()++;
like in Clipper (IMHO it forces more readable code form and is compatible
with our @o:var extension which can be used only without parenthesis) or
generate error only situations when inside () some parameters are passed.

best regards,
Przemek
From druzus at priv.onet.pl  Mon Dec 18 18:35:23 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Mon Dec 18 18:36:12 2006
Subject: [Harbour] ChangeLog 2006-12-19 00:35 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061218233523.GA16775@localhost.localdomain>

2006-12-19 00:35 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbexprc.c
    * added support _" prefix when macro message is used in assignment context
      also when -kc is used. We can block this feature for -kc but as long
      as is not blocked it should work in the same way for -kc and -kh

best regards,
Przemek
From dbtopas at dbtopas.lt  Tue Dec 19 05:37:24 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Tue Dec 19 05:40:08 2006
Subject: [Harbour] object messages in ++, --, <op>= operations
In-Reply-To: <20061218233202.GA16561@localhost.localdomain>
References: <20061218233202.GA16561@localhost.localdomain>
Message-ID: <4587C0E4.8050400@dbtopas.lt>

Hello,


Przemyslaw Czerpak wrote:
> Refuse compilation of
>     o:var()++;
> like in Clipper (IMHO it forces more readable code form and is compatible
> with our @o:var extension which can be used only without parenthesis) or
> generate error only situations when inside () some parameters are passed.

Clipper compatible behaviour is more natural. o:var()++ and o:var(1)++ 
makes me think about such tricks:

CLASS Counters
    DATA nCount INIT 0
    DATA aCount INIT {0, 0, 0}
    METHOD Var(nPos)
ENDCLASS

METHOD Var( nPos ) CLASS Counters
   IF nPos == NIL;  RETURN ::nCount
   ENDIF
RETURN ::aCount[ nPos ]

...
   o:Var()++   // increments o:nCount
   o:Var(1)++  // increments o:aCount[1]



Best regards,
Mindaugas
From saile00 at gmail.com  Tue Dec 19 07:00:32 2006
From: saile00 at gmail.com (Elias Torres)
Date: Tue Dec 19 07:00:36 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <83c34850612190400j5dab78f4k58159dd24de20575@mail.gmail.com>

Hello,

I asked this before. Is it possible for Harbour to manage currency fields
from FoxPro DBFs or is it a Harbour limitation ?

Thank you,

Elias Torres.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061219/ee6d8afe/attachment.html
From druzus at priv.onet.pl  Tue Dec 19 09:07:33 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 19 09:08:23 2006
Subject: [Harbour] Harbour DBFs
In-Reply-To: <000101c72145$f1406de0$2401a8c0@portatil>
References: <000101c72145$f1406de0$2401a8c0@portatil>
Message-ID: <20061219140733.GA13370@localhost.localdomain>

On Sat, 16 Dec 2006, El?as Torres wrote:
> Hello,
> I am a Harbour user and I am opening foxpro DBFs with currency fields. The
> DBF is properly opened, but currency fields are shown as zero. Is this a
> Harbour bug ? Could you help me or tell me how to fix it ? thank you.

AFAIR Harbour should read currency ("Y") DBF fields but I've never
tested it - I do not have FoxPro.
Create a small table with currency field, with few records, send
it here and I'll check it.
F.e. sth like:
    dbCreate("_tst", {{"CURR", "Y", 8, 2}})
    use _tst
    append blank
    replace CURR with 123.45
    append blank
    replace CURR with 345.567
    append blank
    replace CURR with 356.78901
    append blank
    replace CURR with 789.456789
    close

best regards,
Przemek
From saile00 at gmail.com  Tue Dec 19 12:53:05 2006
From: saile00 at gmail.com (Elias Torres)
Date: Tue Dec 19 12:53:10 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <83c34850612190953r48230d3esac8166ce781058ac@mail.gmail.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: _tst.DBF
Type: application/octet-stream
Size: 365 bytes
Desc: not available
Url : http://lists.harbour-project.org/pipermail/harbour/attachments/20061219/fbddf20a/_tst.obj
From druzus at priv.onet.pl  Tue Dec 19 16:48:36 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 19 16:49:26 2006
Subject: [Harbour] ChangeLog 2006-12-19 22:47 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061219214836.GA6721@localhost.localdomain>

2006-12-19 22:47 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbexprop.h
  * harbour/source/common/expropt1.c
    + added hb_compExprParamListLen()

  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
    * use hb_compExprParamListLen()

  * harbour/include/hbexprc.c
    * generate error message for syntax like:
         o:var()++ or o:var()+=10
      only:
         o:var++ and o:var+=10
      is supported, just like for @o:var

  * harbour/include/hbapi.h
  * harbour/source/common/hbstr.c
    + hb_numDecConv() used to convert double value to/from binary integer
      fields with fixed number of decimal places

  * harbour/common.mak
  * harbour/include/hbapicdp.h
  * harbour/source/codepage/Makefile
  + harbour/source/codepage/cptrdos.c
  + harbour/source/codepage/cptrwin.c
  * harbour/source/lang/Makefile
  + harbour/source/lang/msgtrdos.c
  + harbour/source/lang/msgtrwin.c
    + added Turkish CPs and MSGs created by Bicahi Esgici
  + harbour/source/codepage/uc1254.c
  + harbour/source/codepage/uc857.c
    + added unicode tables for Turkish CPs

  * harbour/source/rdd/dbf1.c
  * harbour/source/rdd/workarea.c
    + added support for decimal places in binary integer fields ("I")
    ! fixed currency field decoding ("Y") - it's integer binary value
      not IEEE758 double. Warning: on write the value is rounded not
      truncated like in VFP.

best regards,
Przemek
From druzus at priv.onet.pl  Tue Dec 19 17:23:56 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Tue Dec 19 17:24:44 2006
Subject: [Harbour] ChangeLog 2006-12-19 23:22 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061219222356.GA25968@localhost.localdomain>

2006-12-19 23:22 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/source/rdd/dbf1.c
    ! added missing 'else' and cleaned BCC warnings

best regards,
Przemek
From esgici at gmail.com  Tue Dec 19 17:45:49 2006
From: esgici at gmail.com (Bicahi Esgici)
Date: Tue Dec 19 17:45:52 2006
Subject: [Harbour] ChangeLog 2006-12-19 22:47 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061219214836.GA6721@localhost.localdomain>
References: <20061219214836.GA6721@localhost.localdomain>
Message-ID: <d4ce00e70612191445t5897c5fdia2dd7ea10c287ef0@mail.gmail.com>

Thanks Przemek

-- 
esgici
From saile00 at gmail.com  Wed Dec 20 06:36:15 2006
From: saile00 at gmail.com (Elias Torres)
Date: Wed Dec 20 06:36:20 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <83c34850612200336qb640f8au355e288e4393fe4c@mail.gmail.com>

Thanks Przemek for your work,

We are testing this but it returns a wrong result:

REQUEST DBFCDX

FUNCTION Main

   use "_tst"

   ? Alias()
   ? Curr
   Curr := 6.12
   ? Curr
   SKIP
   ? Curr

   Inkey( 0 )

return NIL

Output:

_TST
             0.0000
             0.0000
             0.0000

Using the DBF that we provided you,

Thank you!

Elias Torres.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061220/4c5c26dd/attachment.html
From saile00 at gmail.com  Wed Dec 20 07:18:00 2006
From: saile00 at gmail.com (Elias Torres)
Date: Wed Dec 20 07:18:04 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <83c34850612200418n2291fba9sc1470631e9e95ecf@mail.gmail.com>

Przemek,

We did a mistake. The values are displayed ok but we can not change them,
this is the right output:

_TST
                 123.4500
                 123.4500  // this has to be 6.12
                 345.5670

Elias Torres.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061220/8059e5ca/attachment.html
From druzus at priv.onet.pl  Wed Dec 20 08:16:58 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 20 08:17:45 2006
Subject: [Harbour] Harbour DBFs
In-Reply-To: <83c34850612200418n2291fba9sc1470631e9e95ecf@mail.gmail.com>
References: <83c34850612200418n2291fba9sc1470631e9e95ecf@mail.gmail.com>
Message-ID: <20061220131658.GA32603@localhost.localdomain>

On Wed, 20 Dec 2006, Elias Torres wrote:
> Przemek,
> We did a mistake. The values are displayed ok but we can not change them,
> this is the right output:
> _TST
>                 123.4500
>                 123.4500  // this has to be 6.12
>                 345.5670

   Curr := 6.12
   ^^^^^^^^^^^^

Should be:
   field->Curr := 6.12
or declare CURR as FIELD
Without it this code creates memvar variable Curr and assign 6.12 to
this memvar instead of field changing. It's Clipper compatible behavior.

best regards,
Przemek
From saile00 at gmail.com  Wed Dec 20 11:07:28 2006
From: saile00 at gmail.com (Elias Torres)
Date: Wed Dec 20 11:07:33 2006
Subject: [Harbour] Harbour DBFs
Message-ID: <83c34850612200807x576b62d5s9cfbc3714e69e6b6@mail.gmail.com>

Thanks Przemek for your work

El?as Torres.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.harbour-project.org/pipermail/harbour/attachments/20061220/8f61d402/attachment.html
From druzus at priv.onet.pl  Wed Dec 20 21:03:05 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Thu Dec 21 10:10:10 2006
Subject: [Harbour] Changelog 2006-12-18 18:20 UTC+0100 Ryszard Glab
In-Reply-To: <4586DFBB.5843.15217C2@localhost>
References: <4586DFBB.5843.15217C2@localhost>
Message-ID: <20061221020305.GA25589@localhost.localdomain>

On Mon, 18 Dec 2006, Ryszard Glab wrote:
>    * source/compiler/harbour.y
>       * fixed reporting errors in cases of unclosed delimiters or
>       unclosed control structures IF/WHILE/FOR/etc

As I can see you also fixed _ProcReq_() so it can be located in statement.
Many thanks. We have the same problem also with PARAMETERS and this should
be fixed too. I can make it myself but I have to know the answer for one
question. We allow to place FIELD and MEMVAR declarations after executable
statement but not inside them.
Why we have such extension and why is limited?

Best regards,
Przemek
From philb at philb.us  Thu Dec 21 23:29:11 2006
From: philb at philb.us (Phil Barnett)
Date: Thu Dec 21 23:30:16 2006
Subject: [Harbour] Harbour Beta?
Message-ID: <200612212329.11999.philb@philb.us>

Przemek,

Are you ready for us to go into bug fixing mode and no new features mode yet?

What are your plans?

-- 
My other computer is your Windows machine
From druzus at priv.onet.pl  Fri Dec 22 04:30:35 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec 22 04:31:25 2006
Subject: [Harbour] Harbour Beta?
In-Reply-To: <200612212329.11999.philb@philb.us>
References: <200612212329.11999.philb@philb.us>
Message-ID: <20061222093035.GB22780@localhost.localdomain>

On Thu, 21 Dec 2006, Phil Barnett wrote:
> Przemek,
> Are you ready for us to go into bug fixing mode and no new features mode yet?
> What are your plans?

In few minute and I'll commit fix for logical expression shortcutting.
F.e. this code illustrates the problem:
    proc main()
    ? eval( {|| t() .or. f(), 1 } )
    return
    func t(); ? "T()"; return .t.
    func f(); ? "F()"; return .f.

with some other minor fixes/optimization/cleanups I've found checking
the source code recently (f.e. missing break for -z switch) and I can
stop any farther modification. One thing will be left open:

    proc p()
    if type("X")="U"
        parameters x
    endif
    return f(x)

cannot be compiled by [x]Harbour. I can fix it but Harbour allows
to use FIELD and MEMVAR declarations in any places outside statements
(just like PARAMETERS) f.e.:
    proc p()
    ? procnam()
    field F
    ? F
    return
and I do not know why. It's very old code which existed in initial
harbour.y. On xHarbour it was recently a discussed if it's a bug or
not and I do not want to touch the code when I do not know the reasons
of some past decisions. Anyhow it's minor problem and fix very easy so
you can start beta process and we simply fix it meanwhile with some
other reported problems when we agree final version.

best regards,
Przemek
From druzus at priv.onet.pl  Fri Dec 22 05:07:56 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Fri Dec 22 05:08:44 2006
Subject: [Harbour] ChangeLog 2006-12-22 11:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061222100756.GA23395@localhost.localdomain>

2006-12-22 11:00 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/contrib/rdd_ads/adsfunc.c
    * do not use hb_param( pItem, HB_IT_BYREF ) but ISBYREF() macro

  * harbour/include/hbdefs.h
    * formatting

  * harbour/include/hbexprb.c
    ! fixed code generated for logical expressions when shortcutting
      is enabled to be Clipper compatible

  * harbour/source/compiler/cmdcheck.c
    ! added missing break in -z compiler switch decoding

  * harbour/source/compiler/hbfix.c
    % added optimizations for code generated for logical expressions,
      it strips a chain of HB_P_DUPLICATE -> HB_P_JUMP[TRUFALES] ->
      HB_P_DUPLICATE -> HB_P_JUMP[TRUFALES] -> ...
      In fact it should not be done here but because we do not have
      any metacode level where such optimizations should be done and
      PCODE is generated online then it will have to be here. Maybe
      in the future we will add metacode.

  * harbour/source/rdd/dbcmd.c
    * make "M" alias Clipper compatible. After some thoughts I decided
      that in some cases it can be usable so now "M" will set WA number
      to 65535 like in Clipper.

  * harbour/source/rdd/dbf1.c
    * allow to open VFP DBFs with _NullFlags system command

  * harbour/source/rdd/delim1.c
  * harbour/source/rdd/sdf1.c
    ! updated field size calculation for some some extended types.

  * harbour/source/rdd/workarea.c
    * generate RT error when CREATEFIELD() method does not accept some
      parameters to avoid silent DBCREATE() failing.

  * harbour/source/vm/macro.c
    * removed hb_compMemvarCheck() - this function was not dooing
      anything - only slows the TYPE() by calling hb_dynsymFind()
      one or two times.
    + added TODO note: memvars create by TYPE() have PUBLIC scope
      in Clipper. Clipper also always tries to evaluate valid expressions
      inside TYPE even if the contain UDF. UDF only stops evaluation
      so:
         TYPE( "(val:=1) + f() + (val2:=2)" )
      creates in clipper public variable VAL but not VAL2.

best regards,
Przemek
From rglab at przesiew.imid.med.pl  Fri Dec 22 09:00:44 2006
From: rglab at przesiew.imid.med.pl (Ryszard Glab)
Date: Fri Dec 22 08:49:31 2006
Subject: [Harbour] Changelog 2006-12-18 18:20 UTC+0100 Ryszard Glab
In-Reply-To: <20061221020305.GA25589@localhost.localdomain>
References: <4586DFBB.5843.15217C2@localhost>
Message-ID: <458BF31C.8180.146664@localhost>

On 21 Dec 2006 at 3:03, Przemyslaw Czerpak wrote:

> As I can see you also fixed _ProcReq_() so it can be located in statement.
> Many thanks. We have the same problem also with PARAMETERS and this should
> be fixed too. I can make it myself but I have to know the answer for one
> question. We allow to place FIELD and MEMVAR declarations after executable
> statement but not inside them. Why we have such extension and why is
> limited?

  It is our omission probably, IMHO we should stay compatible with 
Clipper here and disallow placing FIELD/MEMVAR after executable 
statements.

Regards, Ryszard 
-- 
Ryszard Glab


From philb at philb.us  Fri Dec 22 10:57:03 2006
From: philb at philb.us (Phil Barnett)
Date: Fri Dec 22 10:58:42 2006
Subject: [Harbour] Harbour Beta?
In-Reply-To: <20061222093035.GB22780@localhost.localdomain>
References: <200612212329.11999.philb@philb.us>
	<20061222093035.GB22780@localhost.localdomain>
Message-ID: <200612221057.03703.philb@philb.us>

On Friday 22 December 2006 04:30, Przemyslaw Czerpak wrote:
> On Thu, 21 Dec 2006, Phil Barnett wrote:
> > Przemek,
> > Are you ready for us to go into bug fixing mode and no new features mode
> > yet? What are your plans?
>
> In few minute and I'll commit fix for logical expression shortcutting.
> F.e. this code illustrates the problem:
>     proc main()
>     ? eval( {|| t() .or. f(), 1 } )
>     return
>     func t(); ? "T()"; return .t.
>     func f(); ? "F()"; return .f.
>
> with some other minor fixes/optimization/cleanups I've found checking
> the source code recently (f.e. missing break for -z switch) and I can
> stop any farther modification. One thing will be left open:
>
>     proc p()
>     if type("X")="U"
>         parameters x
>     endif
>     return f(x)
>
> cannot be compiled by [x]Harbour. I can fix it but Harbour allows
> to use FIELD and MEMVAR declarations in any places outside statements
> (just like PARAMETERS) f.e.:
>     proc p()
>     ? procnam()
>     field F
>     ? F
>     return
> and I do not know why. It's very old code which existed in initial
> harbour.y. On xHarbour it was recently a discussed if it's a bug or
> not and I do not want to touch the code when I do not know the reasons
> of some past decisions. Anyhow it's minor problem and fix very easy so
> you can start beta process and we simply fix it meanwhile with some
> other reported problems when we agree final version.

Ok, thanks for the report.

That all sounds like bug fixing, which can occur during beta, but feature 
changes will be locked down.

I propose that we begin the beta cycle between Christmas and New Years. That 
will involve creating beta releases, bug fix cycle, etc until we have a 
release candidate. Probably December 27 or 28 would be good.

-- 
My other computer is your Windows machine
From lorenzo.fiorini at gmail.com  Fri Dec 22 11:30:35 2006
From: lorenzo.fiorini at gmail.com (Lorenzo Fiorini)
Date: Fri Dec 22 11:30:39 2006
Subject: [Harbour] Harbour Beta?
In-Reply-To: <200612221057.03703.philb@philb.us>
References: <200612212329.11999.philb@philb.us>
	<20061222093035.GB22780@localhost.localdomain>
	<200612221057.03703.philb@philb.us>
Message-ID: <9257026e0612220830h3bf004d0ka3d499171c5f5aa9@mail.gmail.com>

On 12/22/06, Phil Barnett <philb@philb.us> wrote:

> That all sounds like bug fixing, which can occur during beta, but feature
> changes will be locked down.

Any chance to have hashes ( xHarbour compatible ) in Harbour 1.0?

regards,
Lorenzo Fiorini
From philb at philb.us  Fri Dec 22 12:05:36 2006
From: philb at philb.us (Phil Barnett)
Date: Fri Dec 22 12:07:20 2006
Subject: [Harbour] Harbour Beta?
In-Reply-To: <9257026e0612220830h3bf004d0ka3d499171c5f5aa9@mail.gmail.com>
References: <200612212329.11999.philb@philb.us>
	<200612221057.03703.philb@philb.us>
	<9257026e0612220830h3bf004d0ka3d499171c5f5aa9@mail.gmail.com>
Message-ID: <200612221205.36202.philb@philb.us>

On Friday 22 December 2006 11:30, Lorenzo Fiorini wrote:
> On 12/22/06, Phil Barnett <philb@philb.us> wrote:
> > That all sounds like bug fixing, which can occur during beta, but feature
> > changes will be locked down.
>
> Any chance to have hashes ( xHarbour compatible ) in Harbour 1.0?

Whatever makes it in by the deadline can be troubleshot during the beta. If 
you intend to submit code, do it now.

-- 
My other computer is your Windows machine
From lorenzo.fiorini at gmail.com  Fri Dec 22 13:33:55 2006
From: lorenzo.fiorini at gmail.com (Lorenzo Fiorini)
Date: Fri Dec 22 13:34:00 2006
Subject: [Harbour] Harbour Beta?
In-Reply-To: <200612221205.36202.philb@philb.us>
References: <200612212329.11999.philb@philb.us>
	<200612221057.03703.philb@philb.us>
	<9257026e0612220830h3bf004d0ka3d499171c5f5aa9@mail.gmail.com>
	<200612221205.36202.philb@philb.us>
Message-ID: <9257026e0612221033m520da872i94a72f9bca79db49@mail.gmail.com>

On 12/22/06, Phil Barnett <philb@philb.us> wrote:

> Whatever makes it in by the deadline can be troubleshot during the beta. If
> you intend to submit code, do it now.

I'm sorry it is well beyond my possibilities :(

My fear is that the lack of "H" datatype in Harbour will make porting
of code from xHarbour more difficult so I hope that core developers
will consider the possibility to add it before the 1.0 milestone.

regards,
Lorenzo Fiorini
From druzus at priv.onet.pl  Sat Dec 23 00:05:53 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 23 00:06:42 2006
Subject: [Harbour] Changelog 2006-12-18 18:20 UTC+0100 Ryszard Glab
In-Reply-To: <458BF31C.8180.146664@localhost>
References: <4586DFBB.5843.15217C2@localhost> <458BF31C.8180.146664@localhost>
Message-ID: <20061223050553.GA25470@localhost.localdomain>

On Fri, 22 Dec 2006, Ryszard Glab wrote:
> > As I can see you also fixed _ProcReq_() so it can be located in statement.
> > Many thanks. We have the same problem also with PARAMETERS and this should
> > be fixed too. I can make it myself but I have to know the answer for one
> > question. We allow to place FIELD and MEMVAR declarations after executable
> > statement but not inside them. Why we have such extension and why is
> > limited?
>   It is our omission probably, IMHO we should stay compatible with 
> Clipper here and disallow placing FIELD/MEMVAR after executable 
> statements.

Thanks for information.
I do not think it's was omission only - at least some comment notes suggested
that someone was making some intentional modifications. Anyhow after some
small test I found that there is much more of similar problems and after
your above notes I decided to fix all of them I located and make Harbour
behavior Clipper compatible.

best regards,
Przemek
From druzus at priv.onet.pl  Sat Dec 23 00:06:40 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 23 00:07:27 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061223050640.GB25470@localhost.localdomain>

2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbexprb.c
    * do not generate HB_P_FUNCPTR - it's not longer necessary
    + added optimization for <exp> + 1, <exp> - 1 - disabled by default
      because it changes error messages in hbtest, code like NIL + 1
      generates 'argument error ++' instead of 'argument error +'. I'd like
      you will decide what you prefer - faster code or strict Clipper error
      messaged.

  * harbour/source/common/expropt2.c
    + added optimizations for <num> + <date>
    + added ooptimizations for <exp> + 0, 0 + <exp>, <exp> - 0
      This is also sth what may interact with operators overloading in object
      system. When we will have strong typing then we should think about an
      option which will optionally disable some optimizations - someone may
      want to define arithmetic where <obj> + 0 gives differ then <obj>
      results.

  * harbour/include/hbcomp.h
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/harbour.yyh
    + added hb_compStatmentStart()
    ! restrict MEMVAR and FIELD usage - now they have to be located before
      executable statements like in Clipper.
    ! generate error when PARAMETERS is used as file wide declaration.
    ! generate errors when different executable statements are used before
      first procedure - now such code was simply ignored without any errors.
    ! generate valid error messages when some declarations are used in
      wrong places
    ! fixed setting begin of executable statement flag in different .prg
      constructions.

best regards,
Przemek
From philb at philb.us  Sat Dec 23 02:17:10 2006
From: philb at philb.us (Phil Barnett)
Date: Sat Dec 23 02:19:36 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061223050640.GB25470@localhost.localdomain>
References: <20061223050640.GB25470@localhost.localdomain>
Message-ID: <200612230217.10992.philb@philb.us>

On Saturday 23 December 2006 00:06, Przemyslaw Czerpak wrote:
>  faster code or strict Clipper error messages.

Interesting question.

My first inclination would be that we have Clipper compatability do that when 
we bring pure Clipper code into Harbour, it still does what we expected it to 
do in Clipper. Since there were custom error routines capability in Clipper, 
then it's natural to assume someone listened for error messages and trapped 
failures based on these messages.

On the other hand, speed of execution is important.

In order to make this kind of decision, we must ask ourselves what the 
tradeoffs are. To do that, we must know what kind of speed factor we are 
dealing with.

If it's .1 faster with different messages, It's probably better to keep the 
Clipper compatible message. If it's 5 times faster, maybe we go for the speed 
enhancement.

Can you give us an example of the speed benefit?

-- 
My other computer is your Windows machine
From druzus at priv.onet.pl  Sat Dec 23 03:40:23 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 23 03:41:12 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <200612230217.10992.philb@philb.us>
References: <20061223050640.GB25470@localhost.localdomain>
	<200612230217.10992.philb@philb.us>
Message-ID: <20061223084023.GA12545@localhost.localdomain>

On Sat, 23 Dec 2006, Phil Barnett wrote:
> On Saturday 23 December 2006 00:06, Przemyslaw Czerpak wrote:
> >  faster code or strict Clipper error messages.
> Interesting question.
> My first inclination would be that we have Clipper compatability do that when 
> we bring pure Clipper code into Harbour, it still does what we expected it to 
> do in Clipper. Since there were custom error routines capability in Clipper, 
> then it's natural to assume someone listened for error messages and trapped 
> failures based on these messages.
> On the other hand, speed of execution is important.
> In order to make this kind of decision, we must ask ourselves what the 
> tradeoffs are. To do that, we must know what kind of speed factor we are 
> dealing with.
> If it's .1 faster with different messages, It's probably better to keep the 
> Clipper compatible message. If it's 5 times faster, maybe we go for the speed 
> enhancement.
> Can you give us an example of the speed benefit?

In this particular case the difference will not be huge. Math operations
are usually fast.
I think that the difference is comparable to this single .prg example:

#define N_LOOP 1000000
proc main()
local i, t
static x:=0
t:=secondsCPU()
for i:=1 to N_LOOP
   x:=x+1
   x:=x+1
   x:=x-1
   x:=x-1
next
? "Time:", secondsCPU() - t, "sec."
t:=secondsCPU()
for i:=1 to N_LOOP
   x+=1
   x+=1
   x-=1
   x-=1
next
? "Time:", secondsCPU() - t, "sec."
return

My results:
    Time:          0.71 sec.
    Time:          0.80 sec.

It's not exactly the same code but the PCODE differences are similar.

This is real code with Harbour version compiled with such optimization
support.

#define N_LOOP 1000000
proc main()
local i, t
static x:=0
t:=seconds()+5; while seconds()<t;end
t:=secondsCPU()
for i:=1 to N_LOOP
   x:=1+x+1
   x:=1+x+1
   x:=1+x-1
   x:=1+x-1
next
? "Time:", secondsCPU() - t, "sec."
return

Standard compilation:
Time:          0.66 sec.

compilation with -kc flag (it disables this optimization)
Time:          1.00 sec.

So the difference is even bigger. Please also note that current
optimization method cannot optimize expressions like:
   x:=1+x-1
Good optimizer should reduce it to:
   x:=x
and then eliminate it at all. It will cause that we will not generate
error messages at all if x type does not support +/- <num> operations.

There is much more of similar optimizations and summary they can
give noticeable speed improvement. When we will have meta code in the
future then it will be possible to implement much more efficient optimizer. 
For some other data type f.e. in string the results of such optimizations
can be very spectacular. See below.
Now we are not fully Clipper compatible in error messages. In last year
I cleaned many of error messages to be as close to Clipper as possible
without speed overhead. I can clean also the rest but with the cost of
speed or some new PCODEs with very similar functionality to some existing
one but HVM will use differ error messages for them.

Finally more noticeable speed improvement example.
This is test code which Lorenzo sent to xHarbour-devel list recently.
If we disable optimizations and generate Clipper compatible code then
the results are:

Started single string way...
Finished in:          5.52 secs, chars/sec      55161.78
Started two strings way...
Finished in:          0.29 secs, chars/sec    1049975.86

With optimizations (current default compiler behavior) it's:

Started single string way...
Finished in:          0.02 secs, chars/sec   15224650.00
Started two strings way...
Finished in:          0.02 secs, chars/sec   15224650.00

So here the difference is _HUGE_. The "single string" test is 275 times
faster. I do not think that anyone will want to drop such optimization
to keep strict Clipper compatibility.

best regards,
Przemek
From philb at philb.us  Sat Dec 23 04:07:57 2006
From: philb at philb.us (Phil Barnett)
Date: Sat Dec 23 04:08:04 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061223084023.GA12545@localhost.localdomain>
References: <20061223050640.GB25470@localhost.localdomain>
	<200612230217.10992.philb@philb.us>
	<20061223084023.GA12545@localhost.localdomain>
Message-ID: <200612230407.57740.philb@philb.us>

On Saturday 23 December 2006 03:40, Przemyslaw Czerpak wrote:

> So here the difference is _HUGE_. The "single string" test is 275 times
> faster. I do not think that anyone will want to drop such optimization
> to keep strict Clipper compatibility.

Agreed.

-- 
My other computer is your Windows machine
From harbour at cbn.net.id  Sat Dec 23 08:44:58 2006
From: harbour at cbn.net.id (Andi Jahja)
Date: Sat Dec 23 08:45:08 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061223050640.GB25470@localhost.localdomain>
References: <20061223050640.GB25470@localhost.localdomain>
Message-ID: <20061223204319.B2F2.HARBOUR@cbn.net.id>

Now the following snippet can't be compiled:

--
static myFunc := { |x| Qout(x)}

Function Main()
   Eval ( myFunc, "Why" )
Return Nil
--

On Sat, 23 Dec 2006 06:06:40 +0100
Przemyslaw Czerpak <druzus@priv.onet.pl> wrote:

> 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)

--
Andi
From niki at synel.co.il  Sun Dec 24 02:09:23 2006
From: niki at synel.co.il (Chen Kedem)
Date: Sun Dec 24 02:07:26 2006
Subject: [Harbour] Can we skip flex the same as bison?
Message-ID: <458E27A3.2A3A@synel.co.il>

Przemek,

Flex is not a standard tool in Win32 environment.
Is it possible to supply flex output files the same way it is
done with bison files?

This way, the end user in Win32 environment would only need a C
compiler (linker and make are usually part of the compiler
distribution).

And in the make files it could be requested by the same macro
HB_REBUILD_PARSER or by a new one like HB_REBUILD_LEXER.

I don't know if flex output is environment dependent or not,
but if it can be done, it would make end users life a bit easier.

** Marry Christmas and Happy Holidays to you all **


  Chen.
**********************************************************************************************
IMPORTANT: The contents of this email and any attachments are confidential. They are intended for the 
named recipient(s) only.
If you have received this email in error, please notify the system manager or the sender immediately and do 
not disclose the contents to anyone or make copies thereof.
*** eSafe scanned this email for viruses, vandals, and malicious content. ***
**********************************************************************************************

From druzus at priv.onet.pl  Sun Dec 24 10:46:06 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sun Dec 24 10:46:58 2006
Subject: [Harbour] ChangeLog 2006-12-23 06:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061223204319.B2F2.HARBOUR@cbn.net.id>
References: <20061223050640.GB25470@localhost.localdomain>
	<20061223204319.B2F2.HARBOUR@cbn.net.id>
Message-ID: <20061224154606.GA17079@localhost.localdomain>

On Sat, 23 Dec 2006, Andi Jahja wrote:
> Now the following snippet can't be compiled:
> --
> static myFunc := { |x| Qout(x)}
> Function Main()
>    Eval ( myFunc, "Why" )
> Return Nil
> --

Ups, I forgot about statements used in codeblocks assigned to static
variables.
Many thanks for the info. I'll fix it in a while.

best regards,
Przemek
From druzus at priv.onet.pl  Sun Dec 24 10:58:20 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sun Dec 24 10:59:09 2006
Subject: [Harbour] Can we skip flex the same as bison?
In-Reply-To: <458E27A3.2A3A@synel.co.il>
References: <458E27A3.2A3A@synel.co.il>
Message-ID: <20061224155820.GB17079@localhost.localdomain>

On Sun, 24 Dec 2006, Chen Kedem wrote:
> Przemek,
> Flex is not a standard tool in Win32 environment.
> Is it possible to supply flex output files the same way it is
> done with bison files?
> This way, the end user in Win32 environment would only need a C
> compiler (linker and make are usually part of the compiler
> distribution).
> And in the make files it could be requested by the same macro
> HB_REBUILD_PARSER or by a new one like HB_REBUILD_LEXER.
> I don't know if flex output is environment dependent or not,
> but if it can be done, it would make end users life a bit easier.

We are not using FLEX at all. I left harbour.l and macro.l files
only as some type of documentations. They were not updated for
recent modifications and probably they cannot be even longer used.
Maybe in some spare time I'll update them but because FLEX cannot
generate MT safe lexers then it's not sth important for me because
it cannot be usable for us in future MT versions.
We are using our own lexers which are MT safe. source/macro/macrolex.c
is a lexer for macro compiler and source/compiler/complex.c is a lexer
for compiler. In fact the last one is a translator which change PP
tokens to grammar parser terminal symbols.

Marry Christmas and Happy Holidays,
Przemek
From antonioharbour at gmail.com  Sun Dec 24 11:10:14 2006
From: antonioharbour at gmail.com (Antonio Linares)
Date: Sun Dec 24 11:10:31 2006
Subject: [Harbour] Can we skip flex the same as bison?
In-Reply-To: <20061224155820.GB17079@localhost.localdomain>
Message-ID: <458ea66f.5b3e7068.5008.fffff8b6@mx.google.com>

Marry Christmas and Happy Holidays to all the Harbour team,

regards,

Antonio


From druzus at priv.onet.pl  Sun Dec 24 11:11:25 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sun Dec 24 11:12:14 2006
Subject: [Harbour] ChangeLog 2006-12-24 16:54 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061224161125.GA4980@localhost.localdomain>

2006-12-24 16:54 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcompdf.h
  * harbour/include/hbexprb.c
  * harbour/source/common/expropt1.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbcomp.c
    - removed not longer used fExternal from compiler structure
    * allow to pass array items by reference ( func(@a[1]) ) and some
      cleanups in reference rules. Probably we should also block using:
         @func(param1 [,param2,[,...paramN]])
      and accept only @func()
    ! fixed using statements in codeblocks used to initialize static
      variables and some other cleanups (f.e. allow to use as static
      initializers any functions which are later eliminated by expression
      optimizer.

Marry Christmas and Happy Holidays,
Przemek
From philb at philb.us  Sun Dec 24 16:44:09 2006
From: philb at philb.us (Phil Barnett)
Date: Mon Dec 25 00:16:01 2006
Subject: [Harbour] Can we skip flex the same as bison?
In-Reply-To: <458ea66f.5b3e7068.5008.fffff8b6@mx.google.com>
References: <458ea66f.5b3e7068.5008.fffff8b6@mx.google.com>
Message-ID: <200612241644.09966.philb@philb.us>

On Sunday 24 December 2006 11:10, Antonio Linares wrote:
> Marry Christmas and Happy Holidays to all the Harbour team,

Thank you, Antonio.

Please accept my Happy Holiday wishes for you all!

-- 
My other computer is your Windows machine
From druzus at priv.onet.pl  Wed Dec 27 09:02:01 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 27 09:02:51 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061227140201.GA25122@localhost.localdomain>

2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hberrors.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/include/hbpcode.h
  * harbour/include/hbxvm.h
  * harbour/source/common/expropt1.c
  * harbour/source/compiler/genc.c
  * harbour/source/compiler/gencc.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbdead.c
  * harbour/source/compiler/hbfix.c
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/compiler/hblbl.c
  * harbour/source/compiler/hbpcode.c
  * harbour/source/compiler/hbstripl.c
  * harbour/source/vm/hvm.c
    + added support for passing optional parameters to called function, f.e.:
         proc p( a, b, ... )
         qout( a, b, "X", ... )
    * forbid creating function pointer when function is used with parameters,
      f.e.: x:=@f1(1,2,3)

  * harbour/source/compiler/complex.c
    * cleaned all restrictions on reserved words I've found - if I missed
      sth then please inform me. The previous behavior and some error
      messages are used with -kc compiler switch

  * harbour/source/rtl/symbol.prg
  * harbour/source/rtl/tobject.prg
    ! eliminated limitations in number of constructor parameters
      (new syntax with passing optional parameters used)

best regards,
Przemek
From dbtopas at dbtopas.lt  Wed Dec 27 10:30:34 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Wed Dec 27 10:31:11 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061227140201.GA25122@localhost.localdomain>
References: <20061227140201.GA25122@localhost.localdomain>
Message-ID: <4592919A.8060309@dbtopas.lt>

Przemyslaw Czerpak wrote:
>     + added support for passing optional parameters to called function, f.e.:
>          proc p( a, b, ... )
>          qout( a, b, "X", ... )

Hello,


usage of ellipsis is ignored in codeblocks:

PROC main()
   A( 1, 2, 3 )
RETURN

PROC A( a, ... )
   QOUT( a, ... )
   EVAL( {|| QOUT( a, ... ) } )
RETURN


BTW, can codeblocks have variable number of arguments? Or it is false 
idea by design?


Best regards,
Mindaugas
From druzus at priv.onet.pl  Wed Dec 27 11:15:46 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 27 11:16:34 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <4592919A.8060309@dbtopas.lt>
References: <20061227140201.GA25122@localhost.localdomain>
	<4592919A.8060309@dbtopas.lt>
Message-ID: <20061227161546.GA27661@localhost.localdomain>

On Wed, 27 Dec 2006, Mindaugas Kavaliauskas wrote:
> Hello,
> usage of ellipsis is ignored in codeblocks:
> PROC main()
>   A( 1, 2, 3 )
> RETURN
> 
> PROC A( a, ... )
>   QOUT( a, ... )
>   EVAL( {|| QOUT( a, ... ) } )
> RETURN

No, it's not ignored. In codeblock eval parameters are used.
Try:

EVAL( {| x, y | QOUT( x, y, a, ... ) }, "A", "B", "C", "D" )

> BTW, can codeblocks have variable number of arguments? Or it is false 
> idea by design?

See above.

best regards,
Przemek
From dbtopas at dbtopas.lt  Wed Dec 27 11:45:57 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Wed Dec 27 11:46:40 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061227161546.GA27661@localhost.localdomain>
References: <20061227140201.GA25122@localhost.localdomain>	<4592919A.8060309@dbtopas.lt>
	<20061227161546.GA27661@localhost.localdomain>
Message-ID: <4592A345.8090405@dbtopas.lt>

Przemyslaw Czerpak wrote:
> No, it's not ignored. In codeblock eval parameters are used.
> Try:
> 
> EVAL( {| x, y | QOUT( x, y, a, ... ) }, "A", "B", "C", "D" )

OK! I've just thought, I need to write
    {| x, y, ... | QOUT( x, y, a, ... ) }
to use codeblock's varargs.


Best regards,
Mindaugas
From druzus at priv.onet.pl  Wed Dec 27 12:28:49 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 27 12:29:37 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <4592A345.8090405@dbtopas.lt>
References: <20061227140201.GA25122@localhost.localdomain>
	<4592919A.8060309@dbtopas.lt>
	<20061227161546.GA27661@localhost.localdomain>
	<4592A345.8090405@dbtopas.lt>
Message-ID: <20061227172849.GA17065@localhost.localdomain>

On Wed, 27 Dec 2006, Mindaugas Kavaliauskas wrote:
> >No, it's not ignored. In codeblock eval parameters are used.
> >Try:
> >EVAL( {| x, y | QOUT( x, y, a, ... ) }, "A", "B", "C", "D" )
> OK! I've just thought, I need to write
>    {| x, y, ... | QOUT( x, y, a, ... ) }
> to use codeblock's varargs.

I also thought about it but unlike in normal function in codeblocks
you can always access additional parameters passed to EVAL and it's
not necessary to generate special function frame. So I decided to
not introduce any limitations in codeblock. Anyhow if you think it's
ugly then I can force the syntax like above.

best regards,
Przemek
From druzus at priv.onet.pl  Wed Dec 27 15:16:37 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Wed Dec 27 15:17:33 2006
Subject: [Harbour] ChangeLog 2006-12-27 21:12 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061227201637.GA32206@localhost.localdomain>

2006-12-27 21:12 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcompdf.h
    * removed not longer used pFunCall from asMacro expression.
      This item was used only in a very old s:="1,2";f(&s) implementation.

  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/include/hbexprop.h
  * harbour/source/common/expropt1.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
    * a little bit more simple implementation of passing optional arguments
      and simplified some code. Now they can be used in any place in argument
      list (also repeated). It's also possible to create arrays using "..."
      as array element(s), f.e.: func f(...); return { "{", ..., "}" }
      If you think it will be usable then I can also add support for accessing
      array items with optional parameters, f.e.: ? a[ ... ]
      so it can be used in the same context as xbase++ like macro lists
      but for this I will need new PCODE so I'd like to hear your opinion
      ASAP - I'm closing any extensions today.

best regards,
Przemek
From dbtopas at dbtopas.lt  Wed Dec 27 16:41:46 2006
From: dbtopas at dbtopas.lt (Mindaugas Kavaliauskas)
Date: Wed Dec 27 16:43:12 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061227172849.GA17065@localhost.localdomain>
References: <20061227140201.GA25122@localhost.localdomain>	<4592919A.8060309@dbtopas.lt>	<20061227161546.GA27661@localhost.localdomain>	<4592A345.8090405@dbtopas.lt>
	<20061227172849.GA17065@localhost.localdomain>
Message-ID: <4592E89A.7090504@dbtopas.lt>

Przemyslaw Czerpak wrote:
>>OK! I've just thought, I need to write
>>   {| x, y, ... | QOUT( x, y, a, ... ) }
>>to use codeblock's varargs.
> 
> I also thought about it but unlike in normal function in codeblocks
> you can always access additional parameters passed to EVAL and it's
> not necessary to generate special function frame. So I decided to
> not introduce any limitations in codeblock. Anyhow if you think it's
> ugly then I can force the syntax like above.

It is better to use ellipsis in argument lists of codeblock. Otherwise, 
my previuos sample
PROC A( a, ... )
   QOUT( a, ... )
   EVAL( {|| QOUT( a, ... ) } )
RETURN
makes people think that arguments of procedure could be used.

The other question is, why it is not possible to reach ... arguments of 
procedure from inside of codeblock? (Ok, I understand why it is not 
possible in current implementation, but this question will be given by 
users who do not know the internals, detached variables, HB_P_PUSHBLOCK 
parameters, etc.)


 > I also thought about it but unlike in normal function in codeblocks
 > you can always access additional parameters passed to EVAL

This is new thing for me!!! And now I began to think, why do we have 
such limitation in .prg functions and procedures? The only reason is to 
have a fixed numbering of local variables or there are more reasons?


>  * a little bit more simple implementation of passing optional arguments
>    and simplified some code. Now they can be used in any place in argument
>    list (also repeated). It's also possible to create arrays using "..."
>    as array element(s), f.e.: func f(...); return { "{", ..., "}" }

Nice features :) We can (almost) implement it using preprocessor:
   HB_APARAMS() => {...}
   HB_EXECFROMARRAY(func, {...} ) => &func(...)

The whole idea of ... is to give possibility of passing variable number 
of parameters to some operation. Implementation of FUNC funcname(...) 
let us accept variable number of parameters.
To call function with variable number of parameters, we needed 
additional function HB_EXECFROMARRAY() before the last changes.
This is nice solution. The syntax of language supports calling of 
function with variable number of parameters itself. But we can do it 
only if we use unmodified ... parameters. Otherwise, we still need 
HB_EXECFROMARRAY().


 > If you think it will be usable then I can also add support for
 > accessing array items with optional parameters, f.e.: ? a[ ... ]

It's easy to implement a[ ... ]
    b := a
    AEVAL({...}, {|X| b := b[X]}).
I suggest to implement it, if we can do it without limitations and side 
effects, i.e., it will be supported by macro, it will work on left side 
of expression, @a[...], o:var[...]++, etc.

Because some problems could arise, ex.:
    FUNC dofunc(f, ...)
       IF f == "substr"
          RETURN substr(...) // compile error
       ENDIF
    RETURN NIL


 > so it can be used in the same context as xbase++ like macro lists
 > but for this I will need new PCODE so I'd like to hear your opinion
 > ASAP - I'm closing any extensions today.

Sorry of my letter being more "brainstorming" than argumented ideas. 
It's because I want to send it today. :)



Best regards,
Mindaugas


P.S. I guess this can be easily fixed:   QOUT( ..., "=", ... )

From sscc at mweb.co.za  Thu Dec 28 03:33:02 2006
From: sscc at mweb.co.za (Alex Strickland)
Date: Thu Dec 28 03:33:14 2006
Subject: [Harbour] ChangeLog 2006-12-27 21:12 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <20061227201637.GA32206@localhost.localdomain>
References: <20061227201637.GA32206@localhost.localdomain>
Message-ID: <4593813E.9010909@mweb.co.za>

Przemyslaw Czerpak wrote:

>   * harbour/source/compiler/harbour.yyc
>     * a little bit more simple implementation of passing optional arguments
>       and simplified some code. Now they can be used in any place in argument
>       list (also repeated). It's also possible to create arrays using "..."
>       as array element(s), f.e.: func f(...); return { "{", ..., "}" }

That is cool.

>       If you think it will be usable then I can also add support for accessing
>       array items with optional parameters, f.e.: ? a[ ... ]
>       so it can be used in the same context as xbase++ like macro lists
>       but for this I will need new PCODE so I'd like to hear your opinion
>       ASAP - I'm closing any extensions today.

I don't understand the possible uses?

Regards
Alex
From druzus at priv.onet.pl  Thu Dec 28 10:19:15 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Thu Dec 28 10:20:05 2006
Subject: [Harbour] ChangeLog 2006-12-27 21:12 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <4593813E.9010909@mweb.co.za>
References: <20061227201637.GA32206@localhost.localdomain>
	<4593813E.9010909@mweb.co.za>
Message-ID: <20061228151914.GA805@localhost.localdomain>

On Thu, 28 Dec 2006, Alex Strickland wrote:
> >  * harbour/source/compiler/harbour.yyc
> >    * a little bit more simple implementation of passing optional arguments
> >      and simplified some code. Now they can be used in any place in 
> >      argument
> >      list (also repeated). It's also possible to create arrays using "..."
> >      as array element(s), f.e.: func f(...); return { "{", ..., "}" }
> That is cool.
> >      If you think it will be usable then I can also add support for 
> >      accessing
> >      array items with optional parameters, f.e.: ? a[ ... ]
> >      so it can be used in the same context as xbase++ like macro lists
> >      but for this I will need new PCODE so I'd like to hear your opinion
> >      ASAP - I'm closing any extensions today.
> I don't understand the possible uses?

static aStorage := {}
[...]
function StorredItems( ... )
return aStorage[ ... ]
[...]

? StorredItems(2,3,4)

or with hashes:

? StorredItems( "invoice", "custommer", "name" )

Of course it can be also simulated in the way Mindaugas suggested but
IMHO if we allow to use a[ &macro ] like in xbase++ then we should also
allow to use ... in this context.

best regards,
Przemek
From druzus at priv.onet.pl  Thu Dec 28 10:36:13 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Thu Dec 28 10:37:02 2006
Subject: [Harbour] ChangeLog 2006-12-27 15:00 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
In-Reply-To: <4592E89A.7090504@dbtopas.lt>
References: <20061227140201.GA25122@localhost.localdomain>
	<4592919A.8060309@dbtopas.lt>
	<20061227161546.GA27661@localhost.localdomain>
	<4592A345.8090405@dbtopas.lt>
	<20061227172849.GA17065@localhost.localdomain>
	<4592E89A.7090504@dbtopas.lt>
Message-ID: <20061228153612.GB805@localhost.localdomain>

On Wed, 27 Dec 2006, Mindaugas Kavaliauskas wrote:
> It is better to use ellipsis in argument lists of codeblock. Otherwise, 
> my previuos sample
> PROC A( a, ... )
>   QOUT( a, ... )
>   EVAL( {|| QOUT( a, ... ) } )
> RETURN
> makes people think that arguments of procedure could be used.

OK, I'll block it in a while and RT error will be generated.

> The other question is, why it is not possible to reach ... arguments of 
> procedure from inside of codeblock? (Ok, I understand why it is not 
> possible in current implementation, but this question will be given by 
> users who do not know the internals, detached variables, HB_P_PUSHBLOCK 
> parameters, etc.)

It can be also implemented but for me much more important is fetching
eval()/inline method parameters. I will need such functionality to
simplify some hbclass rules and easy implement delegate messages without
passing all parameters to definition.

> > I also thought about it but unlike in normal function in codeblocks
> > you can always access additional parameters passed to EVAL
> This is new thing for me!!! And now I began to think, why do we have 
> such limitation in .prg functions and procedures? The only reason is to 
> have a fixed numbering of local variables or there are more reasons?

And this is the reason. Before Ryszard modification which introduced
support for variable number of parameters it was necessary to keep
fixed number of parameters on HVM stack because locals are located
just after them and accessed with fixed offset, calculated from function
base address. Now we have second pointer which can be used to calculate
base address for locals so we can even drop previous method and always
use VFRAME.

> The whole idea of ... is to give possibility of passing variable number 
> of parameters to some operation. Implementation of FUNC funcname(...) 
> let us accept variable number of parameters.
> To call function with variable number of parameters, we needed 
> additional function HB_EXECFROMARRAY() before the last changes.
> This is nice solution. The syntax of language supports calling of 
> function with variable number of parameters itself. But we can do it 
> only if we use unmodified ... parameters. Otherwise, we still need 
> HB_EXECFROMARRAY().

Exactly.

> > If you think it will be usable then I can also add support for
> > accessing array items with optional parameters, f.e.: ? a[ ... ]
> It's easy to implement a[ ... ]
>    b := a
>    AEVAL({...}, {|X| b := b[X]}).
> I suggest to implement it, if we can do it without limitations and side 
> effects, i.e., it will be supported by macro, it will work on left side 
> of expression, @a[...], o:var[...]++, etc.

The macro support can be discussed later. It may have some bad side effects
so I will have to rethink it. Rest will work as expected.

> Because some problems could arise, ex.:
>    FUNC dofunc(f, ...)
>       IF f == "substr"
>          RETURN substr(...) // compile error
>       ENDIF
>    RETURN NIL

This is yet another problem. We can disable checking for number
of parameters in standard functions when macro or epsilon is used.
But it's sth what can be quite easy done during release freeze process.

> Sorry of my letter being more "brainstorming" than argumented ideas. 
> It's because I want to send it today. :)

Thank you. As always your ideas are very valuable.
But yesterday I had to work on some other things and I was not able
to finish it. I'll commit modifications soon. It will be my last commit.

> P.S. I guess this can be easily fixed:   QOUT( ..., "=", ... )

I'm sorry I do not know what is the problem.

Best regards,
Przemek
From druzus at priv.onet.pl  Thu Dec 28 10:43:36 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Thu Dec 28 10:44:23 2006
Subject: [Harbour] ChangeLog 2006-12-28 16:40 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061228154335.GA12254@localhost.localdomain>

2006-12-28 16:40 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hbexprb.c
  * harbour/include/hbexprc.c
  * harbour/include/hbpcode.h
  * harbour/include/hbpp.h
  * harbour/include/hbxvm.h
  * harbour/source/compiler/genc.c
  * harbour/source/compiler/gencc.c
  * harbour/source/compiler/gencli.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/compiler/hbpcode.c
  * harbour/source/vm/hvm.c
  * harbour/source/vm/macro.c
    * changed HB_P_MACROPUSHINDEX PCODE behavior - now it does not evaluated
      macro expression
    * eliminated HB_ET_MACRO_INDEX - HB_ET_MACRO_LIST can be used instead
    * accept ... in codeblocks only when codeblocks parameters are defined
      as variables, f.e: {|a,b,...|qout(a+b,...)}
    ! fixed error in a[&s]:=100
    + added support for a[...] - now ... can be used in the same context as
      xbase++ like multivalue macro (a[&s])
    * disabled ++, --, <op>= optimizations when -kc (strict Clipper
      compatibility mode) compiler switch is used

best regards,
Przemek
From druzus at priv.onet.pl  Sat Dec 30 16:51:18 2006
From: druzus at priv.onet.pl (Przemyslaw Czerpak)
Date: Sat Dec 30 16:52:10 2006
Subject: [Harbour] ChangeLog 2006-12-30 22:45 UTC+0100 Przemyslaw Czerpak
	(druzus/at/priv.onet.pl)
Message-ID: <20061230215118.GA11470@localhost.localdomain>

2006-12-30 22:45 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/source/common/expropt1.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/macro/macro.l
  * harbour/source/macro/macro.y
  * harbour/source/macro/macro.yyc
  * harbour/source/macro/macro.yyh
  * harbour/source/macro/macrolex.c
  * harbour/source/vm/macro.c
    * final grammar cleanup: removed unused and/or unnecessary grammar
      expressions in *.y files, fixed some differences between compiler
      and macrocompiler, fixed some other bugs, typos, clipper
      incompatibilities, etc.
      It's end of year, it's late and sorry but I'd like to begin making
      something absolutely differ then creating detail description ;-)
      If you will have any questions then I'll answer in new year.

  * harbour/source/rdd/dbffpt/Makefile
    * small hack for XCC compilation

best regards and happy new year,
Przemek
From hbco2 at sbcglobal.net  Sat Dec 30 18:24:57 2006
From: hbco2 at sbcglobal.net (Bill Smith)
Date: Sat Dec 30 18:25:37 2006
Subject: [Harbour] ChangeLog 2006-12-30 22:45 UTC+0100 Przemyslaw
	Czerpak(druzus/at/priv.onet.pl)
References: <20061230215118.GA11470@localhost.localdomain>
Message-ID: <003c01c72c69$b9168ec0$0203a8c0@hbco>

Have a very very Happy New Year!

Bill

----- Original Message ----- 
From: Przemyslaw Czerpak
To: Harbour Project Main Developer List.
Sent: Saturday, December 30, 2006 1:51 PM
Subject: [Harbour] ChangeLog 2006-12-30 22:45 UTC+0100 Przemyslaw
Czerpak(druzus/at/priv.onet.pl)


2006-12-30 22:45 UTC+0100 Przemyslaw Czerpak (druzus/at/priv.onet.pl)
  * harbour/include/hbcomp.h
  * harbour/include/hbcompdf.h
  * harbour/include/hbexpra.c
  * harbour/include/hbexprb.c
  * harbour/source/common/expropt1.c
  * harbour/source/compiler/harbour.c
  * harbour/source/compiler/harbour.y
  * harbour/source/compiler/harbour.yyc
  * harbour/source/compiler/hbgenerr.c
  * harbour/source/macro/macro.l
  * harbour/source/macro/macro.y
  * harbour/source/macro/macro.yyc
  * harbour/source/macro/macro.yyh
  * harbour/source/macro/macrolex.c
  * harbour/source/vm/macro.c
    * final grammar cleanup: removed unused and/or unnecessary grammar
      expressions in *.y files, fixed some differences between compiler
      and macrocompiler, fixed some other bugs, typos, clipper
      incompatibilities, etc.
      It's end of year, it's late and sorry but I'd like to begin making
      something absolutely differ then creating detail description ;-)
      If you will have any questions then I'll answer in new year.

  * harbour/source/rdd/dbffpt/Makefile
    * small hack for XCC compilation

best regards and happy new year,
Przemek
_______________________________________________
Harbour mailing list
Harbour@harbour-project.org
http://lists.harbour-project.org/mailman/listinfo/harbour

From roberbox at gmail.com  Sun Dec 31 06:08:14 2006
From: roberbox at gmail.com (Roberto Lopez)
Date: Sun Dec 31 06:08:23 2006
Subject: [Harbour] OrkdKeyNo() / OrdKeyGoTo()
In-Reply-To: <003c01c72c69$b9168ec0$0203a8c0@hbco>
References: <20061230215118.GA11470@localhost.localdomain>
	<003c01c72c69$b9168ec0$0203a8c0@hbco>
Message-ID: <45979A1E.9000206@gmail.com>

Hi All,

    Are there any non documented Clipper functions implemented in 
Harbour that offers the same functionality as OrkdKeyNo() / OrdKeyGoTo() 
for filtered tables ?

    TIA.

Regards,

Roberto.

From roberbox at gmail.com  Sun Dec 31 09:47:53 2006
From: roberbox at gmail.com (Roberto Lopez)
Date: Sun Dec 31 09:48:49 2006
Subject: [Harbour] OrkdKeyNo() / OrdKeyGoTo()
In-Reply-To: <003c01c72c69$b9168ec0$0203a8c0@hbco>
References: <20061230215118.GA11470@localhost.localdomain>
	<003c01c72c69$b9168ec0$0203a8c0@hbco>
Message-ID: <4597CD99.6090703@gmail.com>

Hi All,

    Are there any non documented Clipper functions implemented in
Harbour that offers the same functionality as OrkdKeyNo() / OrdKeyGoTo()
for filtered tables ?

    TIA.

Regards,

Roberto.



	

	
		
__________________________________________________ 
Pregunt?. Respond?. Descubr?. 
Todo lo que quer?as saber, y lo que ni imaginabas, 
est? en Yahoo! Respuestas (Beta). 
?Probalo ya! 
http://www.yahoo.com.ar/respuestas 

